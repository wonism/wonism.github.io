(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{391:function(n){n.exports={data:{markdownRemark:{id:"/Users/wonism/project/wonism.github.io-gatsby/src/pages/2018-04-30-set-interval-correction/index.md absPath of file >>> MarkdownRemark",html:'<h2>setInterval</h2>\n<p><code class="hljs-text">setInterval</code>을 사용하면, 일정한 주기로 반복적인 함수를 실행할 수 있다.<br />\n사용 방법은 <code class="hljs-text">setInterval(function callback () {}, interval.ms)</code>과 같이 사용하며, 두번째 인자는 <code class="hljs-text">ms</code>단위이다.<br />\n예를 들어 다음과 같은 코드는 1초에 한 번씩 <code class="hljs-text">Hello, Interval!</code>이란 문자열을 출력한다.<br /></p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Hello, Interval\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><code class="hljs-text">setInterval</code>을 실행함으로써 반환되는 값은 자연수(<code class="hljs-text">Number</code> 타입)이며, 일종(一種)의 프로세스 아이디(pid)라고 봐도 무방하다.<br />\n이 값은 <code class="hljs-text">clearInterval(pid)</code>로 인터벌을 중지하고자 할 때 사용된다.</p>\n<h2>setInterval과 싱글 스레드</h2>\n<p>자바스크립트는 싱글 스레드를 사용하기 때문에 이벤트 루프 기반의 동시성 지원을 한다.<br />\n이로 인해 <code class="hljs-text">setInterval</code>은 (<code class="hljs-text">setTimeout</code>도 마찬가지이다.) 약간의 지연이 발생한다.</p>\n<p>다음 예제 코드를 실행하고, 그 결과를 보겠다.<br />\n(크롬 브라우저(65.0.3325.181 사용 중)에서는 내부적으로 보정이 들어가기 때문에 파이어폭스에서 실행을 한 결과를 첨부했다.)</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 1001ms</span>\n<span class="token comment">// 2002ms</span>\n<span class="token comment">// 3003ms</span>\n<span class="token comment">// 4004ms</span>\n<span class="token comment">// 5005ms</span>\n<span class="token comment">// 6009ms</span>\n<span class="token comment">// 7009ms</span>\n<span class="token comment">// 8010ms</span>\n<span class="token comment">// 9013ms</span>\n<span class="token comment">// 10016ms</span>\n</code></pre>\n      </div>\n<h2>setInterval 보정하기</h2>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token keyword">const</span> setCorrectedInterval <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> startTime<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">tick</span> <span class="token operator">=</span> <span class="token punctuation">(</span>cb<span class="token punctuation">,</span> dl<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      isStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      count<span class="token operator">++</span><span class="token punctuation">;</span>\n\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token function">tick</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> dl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> dl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> delayed <span class="token operator">=</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> correction <span class="token operator">=</span> <span class="token punctuation">(</span>delay <span class="token operator">*</span> count<span class="token punctuation">)</span> <span class="token operator">-</span> delayed<span class="token punctuation">;</span>\n\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      count<span class="token operator">++</span><span class="token punctuation">;</span>\n\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token function">tick</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> dl <span class="token operator">+</span> correction<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> dl <span class="token operator">+</span> correction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token function">tick</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setCorrectedInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>시간 보정을 위해 클로저 구문 안에 <code class="hljs-text">startTime</code>, <code class="hljs-text">count</code> 등의 지역 변수를 선언한다.</p>\n<p>함수가 처음 시작되면 첫 번째 인자인 콜백 함수를 즉시 시작하는게 아니라,\n<code class="hljs-text">setTimeout</code>에 내부 함수와 인터벌값을 인자로 전달한다.<br />\n두 번째 부터는 지연된 시간과 콜백 함수를 실행하고자 하는 시간의 갭을 구한 뒤,\n내부 함수에서 전달받은 2번째 인자와 더하여 시간을 보정하며,\n<code class="hljs-text">setInterval</code>을 호출하며 콜백함수를 인터벌로 반복하도록 한다.</p>\n<h2>setCorrectedInterval을 비우기 위한 clearCorrectedInterval</h2>\n<p><code class="hljs-text">setInterval</code>이나 <code class="hljs-text">setTimeout</code>처럼 <code class="hljs-text">id</code>값을 반환하도록하며,\n조건문을 통해 <code class="hljs-text">clear</code>되지 않은 인터벌들만 실행하도록 한다.<br />\n아이디들을 저장할 객체 <code class="hljs-text">intervals</code>는 <code class="hljs-text">setCorrectedInterval</code>과 같은 스코프에 생성하며, 각 아이디들은 <code class="hljs-text">setTimeout</code>의 아이디와 맵핑된다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token keyword">let</span> intervalId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> intervals <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> setCorrectedInterval <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> startTime<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> id <span class="token operator">=</span> intervalId<span class="token operator">++</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">tick</span> <span class="token operator">=</span> <span class="token punctuation">(</span>cb<span class="token punctuation">,</span> dl<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      isStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      count<span class="token operator">++</span><span class="token punctuation">;</span>\n\n      intervals<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token function">tick</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> dl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> dl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> delayed <span class="token operator">=</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> correction <span class="token operator">=</span> <span class="token punctuation">(</span>delay <span class="token operator">*</span> count<span class="token punctuation">)</span> <span class="token operator">-</span> delayed<span class="token punctuation">;</span>\n\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      count<span class="token operator">++</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        intervals<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token function">tick</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> dl <span class="token operator">+</span> correction<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> dl <span class="token operator">+</span> correction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">tick</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> id<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">clearCorrectedInterval</span> <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">clearTimeout</span><span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">delete</span> intervals<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>',frontmatter:{title:"setInterval과 싱글 스레드 그리고 시간 보정",path:"/set-interval-correction/",images:["images/js.jpg"],category:"JavaScript",tags:["javascript","setinterval","settimeout","interval","correction"],date:"2018-04-30T19:17:16.000Z",components:null,tweets:null,summary:"setInterval을 사용하면, 일정한 주기로 반복적인 함수를 실행할 수 있다. 사용 방법은 setInterval(function callback () {}, interval.ms)과 같이 사용하며, 두번째 인자는 ms단위이다."}}},pageContext:{}}}}]);
//# sourceMappingURL=path---set-interval-correction-511ea0671fb594db7d0e.js.map