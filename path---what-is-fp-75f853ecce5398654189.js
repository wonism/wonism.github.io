webpackJsonp([0x56d4275c0062980],{"./node_modules/json-loader/index.js!./.cache/json/what-is-fp.json":function(n,s){n.exports={data:{site:{siteMetadata:{title:"Wonism ∙ Front-end Developer",author:"wonism"}},markdownRemark:{id:"/Users/wonism/project/wonism.github.io-gatsby/src/pages/2017-09-09-what-is-fp/index.md absPath of file >>> MarkdownRemark",html:'<p>함수형 프로그래밍은 순수한 함수를 작성하고, 공유된 상태와 변경 가능한 데어토 및 부작용을 피하여 소프트웨어를 작성하는 프로세스이다. 함수형 프로그래밍은 명령형이 선언형이며, 애플리케이션의 상태는 순수한 함수를 통해 전달된다. 애플리케이션의 상태가 공유되고, 객체의 메소드와 사용되는 객체 지향 프로그래밍과는 대조된다.</p>\n<p>함수형 프로그래밍은 순수한 함수를 작성하고, 공유된 상태와 변경 가능한 데어토 및 부작용을 피하여 소프트웨어를 작성하는 프로세스이다.<br />\n함수형 프로그래밍은 명령형이 선언형이며, 애플리케이션의 상태는 순수한 함수를 통해 전달된다.<br />\n애플리케이션의 상태가 공유되고, 객체의 메소드와 사용되는 객체 지향 프로그래밍과는 대조된다.</p>\n<h2>함수형 프로그래밍의 장점</h2>\n<p>함수형 코드는 명령형이나 객체지향 코드보다 간결하고 예측하기 쉬우며, 이에 따라 테스트가 더 쉬워진다.</p>\n<h2>Pure functions</h2>\n<p>함수형 프로그래밍에서 중요한 핵심은 함수는 부작용이 없어야 하며, 외부의 상태에 종속되지 않아야 한다.<br />\n즉, 함수는 입력을 받고 출력을 반환함에 있어 외부의 값에 접근하지 않아야 한다.<br />\n다음 예제를 통해 <code>순수함수</code>와 <code>순수함수가 아닌 함수</code>에 대해 알아보겠다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token comment" spellcheck="true">/* pure function */</span>\n<span class="token keyword">const</span> double <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">/* impure function */</span>\n<span class="token keyword">const</span> operand <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> multiple <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>num <span class="token operator">*</span> operand<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><code>double</code>의 입력이 <code>2</code>라면, 해당 함수의 반환값은 항상 <code>4</code>이다.<br />\n반면, <code>multiple</code>의 입력이 <code>2</code>로 고정되어도 함수 외부의 <code>operand</code>가 다른 <code>2</code>가 확실하지 않다면 반환 값을 <code>4</code>라고 예상하기 힘들다.</p>\n<h2>Higher Order Functions</h2>\n<p><code>HOC</code>(Higher Order Functions)는 다른 함수를 인자로 사용하거나 함수를 반환하는 함수, 또는 두 가지 특징을 모두 가진 함수이다.<br />\n고차 함수는 다음과 같은 경우 주로 사용된다.<br /></p>\n<ul>\n<li>콜백 함수, 프로미스, 모나드 등을 사용하여, 동작과 효과 또는 비동기 흐름 제어를 추상화하거나 격리한다.</li>\n<li>다양한 데이터 유형에 대해 작동할 수 있는 유틸리티 생성한다.</li>\n<li>함수를 부분적으로 인수에 적용하거나 재사용 또는 함수 조합을 위한 커리함수를 작성한다.</li>\n<li>함수 목록을 가져오고, 해당 입력 함수의 조합을 반환한다.</li>\n</ul>\n<p>다음은 사용 예제이다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token keyword">const</span> isEven <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> evenNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evenNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2, 4, 6, 8, 10</span>\n</code></pre>\n      </div>\n<p><code>isEven</code>은 배열을 처리하는 로직이 필요 없으며, 배열을 순환하면서 재사용된다.</p>\n<h2>Currying</h2>\n<p>커링은 여러 인자를 받는 함수를 인자 하나씩 사용하여 함수 순서를 실행할 수 있도록 변환하는 것을 말한다.<br />\n이는 람다 표현식과 클로저를 통해 쉽게 구현할 수 있다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token comment" spellcheck="true">/* not curried function */</span>\n<span class="token keyword">function</span> <span class="token function">sumOfThreeThings</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">sumOfThreeThings</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span>\n\n<span class="token comment" spellcheck="true">/* curried function */</span>\n<span class="token keyword">const</span> sumOfThreeThings <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span>\n  y <span class="token operator">=</span><span class="token operator">></span>\n    z <span class="token operator">=</span><span class="token operator">></span>\n      x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>\n<span class="token function">sumOfThreeThings</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span>\n</code></pre>\n      </div>\n<h3>Auto-currying</h3>\n<p><a href="https://github.com/lodash/lodash"><code>lodash</code></a>와 <a href="https://github.com/ramda/ramda"><code>Ramda</code></a>는 <code>curry</code>메소드를 가지고 있다. 이는 여러개의 인수를 가지는 함수를 커링된 함수로 만들어준다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token comment" spellcheck="true">// use lodash or ramda</span>\n<span class="token keyword">const</span> curry <span class="token operator">=</span> _<span class="token punctuation">.</span>curry <span class="token operator">||</span> R<span class="token punctuation">.</span>curry<span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// given function that add 2 parameters</span>\n<span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> y\n\n<span class="token comment" spellcheck="true">// transfired function</span>\n<span class="token keyword">const</span> curriedAdd <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// results</span>\n<span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span>\n<span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (y) => 1 + y</span>\n<span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span>\n</code></pre>\n      </div>\n<h2>Function composition</h2>\n<p>합성함수는 말그대로 두 가지 이상의 함수가 합성되었음을 뜻한다.<br />\n두 함수 <code>f</code>와 <code>g</code>가 있고 <code>f(g(x))</code>와 같이 사용된다고 할 때, 이를 수식 <code>f ∘ g(x)</code>과 같이 표현할 수 있다.<br />\n다음은 합성함수의 예시이다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token keyword">const</span> compose <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">=</span><span class="token operator">></span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> add <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> y <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token keyword">const</span> pow <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> y <span class="token operator">=</span><span class="token operator">></span> y <span class="token operator">**</span> x<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> add2 <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> add2ThenSqaure <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> add2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">add2ThenSquare</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 144</span>\n</code></pre>\n      </div>\n<h2>Point free notation</h2>\n<p><code>Point free</code>는 함수를 작성할 때, 매개변수를 정의하지 않는 것이다.<br />\n이는 함수를 더욱 간결하게 해준다.<br />\n다음은 <code>point free</code>한 함수에 대한 예이다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token keyword">const</span> map <span class="token operator">=</span> fn <span class="token operator">=</span><span class="token operator">></span> list <span class="token operator">=</span><span class="token operator">></span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// or use lodash/fp</span>\n<span class="token comment" spellcheck="true">// import { map } from \'lodash/fp\';</span>\n\n<span class="token keyword">const</span> add <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> y <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">/* function without point-free */</span>\n<span class="token keyword">const</span> incrementAll <span class="token operator">=</span> numbers <span class="token operator">=</span><span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">/* function with point-free */</span>\n<span class="token keyword">const</span> incrementAllWithPointFree <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">incrementAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [2, 3, 4]</span>\n<span class="token function">incrementAllWithPointFree</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [2, 3, 4]</span>\n</code></pre>\n      </div>\n<p>불필요한 매개변수를 사용하지 않으므로 매개변수에 대한 이름들에 대해 생각하지 않아도 되며, 코드가 훨씬 간결해진다.</p>\n<h2>Recursion</h2>\n<p>재귀 함수는 어느 조건을 만족할 때까지 자기 자신을 호출하는 함수이다.<br />\n자바스크립트는 반복을 할 때, <code>for</code>, <code>while</code> 등의 반복문을 사용하지만, 함수형 프로그래밍에서는 반복문 대신 재귀를 사용한다.<br />\n아래 예제는 동일한 루프 회수와 값을 얻게되는 반복문과 재귀함수이다.<br />\n기존의 어떤 값을 수정하는 것이 아니라, 기존 값으로 새로운 값을 계산하고 이를 사용한다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token comment" spellcheck="true">/* sum 1..10 with loop */</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  sum <span class="token operator">+</span><span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 55</span>\n\n<span class="token comment" spellcheck="true">/* sum 1..10 with recursion */</span>\nsumRange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> start<span class="token punctuation">,</span> end <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>\n  <span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token punctuation">{</span> start<span class="token punctuation">:</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sum <span class="token operator">+</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token punctuation">{</span> start<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>재귀는 <code>for</code>, <code>while</code> 등의 반복문을 대체할 수 있을 뿐만 아니라, 훨씬 유용하다. 특히 <code>분할 및 정복</code> 알고리즘을 구현하는 데 매우 유용하다.<br />\n가장 대표적인 재귀 함수 사용 예는 팩토리얼(<code>!</code>)이다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token keyword">const</span> factorial <span class="token operator">=</span> n <span class="token operator">=</span><span class="token operator">></span>\n  n <span class="token operator">?</span>\n    n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>\n    <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h4>재귀의 단점</h4>\n<p>꼬리재귀 최적화가 되어있지 않은 언어에서는 재귀 사용 시 단점들이 있다.</p>\n<ul>\n<li>반복문에 비해 속도가 느리다.</li>\n<li>스택을 사용하기 때문에 반복이 많아질 경우, 스택오버플로우가 발생될 수도 있다.</li>\n</ul>\n<p><code>ES2015</code>의 <code>strict mode</code>는 <code>TCO</code>(Tail Call Optimization)를 제공하지만, ES5는 그렇지 않다.<br />\n따라서, ES5에서 일반 반복대신 재귀를 사용하는 것은 성능 상의 이슈를 가질 수 있다.</p>\n<h2>Monads</h2>\n<p><code>Monad</code>는 <code>of</code>와 <code>chain</code>이 있는 객체이다.(<code>chain</code>은 중첩된 객체를 <code>un-nenesting</code>하는 점을 제외하면, <code>map</code>과 같다.)<br /></p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token comment" spellcheck="true">// Implementation</span>\nArray<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>chain <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> it<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// Usage</span>\nArray<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token string">\'cat,dog\'</span><span class="token punctuation">,</span> <span class="token string">\'fish,bird\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [\'cat\', \'dog\', \'fish\', \'bird\']</span>\n\n<span class="token comment" spellcheck="true">// Difference with map</span>\nArray<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token string">\'cat,dog\'</span><span class="token punctuation">,</span> <span class="token string">\'fish,bird\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [[\'cat\', \'dog\'], [\'fish\', \'bird\']]</span>\n</code></pre>\n      </div>\n<h2>함수형 자바스크립트</h2>\n<p>자바스크립트는 유연하다. 함수형, 객체지향형 패러다임의 특징을 모두 가지고 있다.<br />\n함수형 패러다임으로 코드를 작성할 수 있지만 이상적인 함수형 프로그래밍을 하긴 어렵다. 하지만, 다양한 라이브러리를 통해 이를 보완할 수 있다.</p>\n<h3>불변성</h3>\n<p>위에서 말했듯이 함수형 프로그래밍에서는 부작용이 없어야 한다.<br />\n따라서, 변수를 없애고 모든 값을 상수로 만들기 위해 <code>ES2015</code>의 <code>const</code>를 사용할 수 있다.<br />\n<code>const</code>는 객체가 아닌 값에 대해서는 충분하지만, 객체에서는 충분하지 않다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\narr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [0, 1, 2, 3, 4]</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>x<span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { y: 5, z: 0 };</span>\n</code></pre>\n      </div>\n<p><code>const</code>로 선언되었지만, <code>arr</code>와 <code>obj</code>는 변경되었다.\n이를 방지하기 위해, <a href="https://github.com/facebook/immutable-js"><code>Immutable.js</code></a> 등의 라이브러리를 사용하거나, <a href="https://developer.mozilla.org/cs/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"><code>Object.freeze</code></a> 메소드를 사용할 수 있다.</p>\n<h4>Object.freeze</h4>\n<p>다음은 <code>Object.freeze</code>의 사용 예제이다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// arr.push(4); throw error</span>\n<span class="token comment" spellcheck="true">// arr.unshift(0); throw error</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// delete obj.x; throw error</span>\n<span class="token comment" spellcheck="true">// obj.y = 5; throw error</span>\n<span class="token comment" spellcheck="true">// obj.z = 0; throw error</span>\n</code></pre>\n      </div>\n<p>하지만 <code>Object.freeze</code>는 깊은 곳 까지 불변성을 가지게 하지는 못한다.  이 때, <a href="https://github.com/substack/deep-freeze"><code>deep-freeze</code></a>를 사용할 수도 있다.</p>\n<h4>lodash/fp</h4>\n<p>다음은 <code>fp.set</code>을 통한 객체 사용의 예제이다.<br />\n<code>Immutablity.js</code>나 <code>Object.freeze</code>를 사용하지 않으면 객체의 불변성을 보장할 수는 없지만, 객체를 직접 사용하는 경우를 만들지 않음으로써, 객체의 불변성을 보장할 수 있다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token keyword">import</span> fp <span class="token keyword">from</span> <span class="token string">\'lodash/fp\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">set</span> <span class="token punctuation">}</span> <span class="token operator">=</span> fp<span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// const { set, flow } = fp;</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">{</span> innerY<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">\'y.innerY\'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">\'z\'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// of use flow</span>\n<span class="token comment" spellcheck="true">// const newObj = flow(fp.set(\'y.innerY\', 42), fp.set(\'z\', 3))(obj);</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { x: 1, y: { innerY: 2 } }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { x: 1, y: { innerY: 42 }, z: 3 }</span>\n</code></pre>\n      </div>\n<h4>Spread operator</h4>\n<p><code>ES2016</code>의 <code>...</code>를 통해 객체를 변경을 피할 수도 있다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj<span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { x: 1, y: 2 }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { x: 1, y: 2, z: 3 }</span>\n</code></pre>\n      </div>\n<h3>커링</h3>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token keyword">const</span> f <span class="token operator">=</span> a <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">=</span><span class="token operator">></span> c <span class="token operator">=</span><span class="token operator">></span> d <span class="token operator">=</span><span class="token operator">></span> e <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d <span class="token operator">+</span> e<span class="token punctuation">;</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>이 커링된 함수는 <code>()</code>가 너무 많다. 이를 개선하기 위해 위에서 언급한 <code>lodash</code>나 <code>ramda</code>를 사용할 수 있다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token keyword">const</span> curry <span class="token operator">=</span> _<span class="token punctuation">.</span>curry <span class="token operator">||</span> R<span class="token punctuation">.</span>curry<span class="token punctuation">;</span>\n<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d <span class="token operator">+</span> e<span class="token punctuation">;</span>\n\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span>\n</code></pre>\n      </div>\n<h3>합성함수</h3>\n<p>합성함수 예제에서 <code>const compose = (f, g) => x => f(g(x));</code>와 같이 함수를 합성했지만, <code>ramda</code>의 <code>compose</code>함수를 사용할 수도 있다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code><span class="token keyword">const</span> composedFunction <span class="token operator">=</span> R<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2>참고</h2>\n<ul>\n<li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0">Master the JavaScript Interview: What is Functional Programming?</a></li>\n<li><a href="https://www.airpair.com/javascript/posts/mastering-es6-higher-order-functions-for-arrays">Mastering ES6 higher-order functions for Arrays</a></li>\n<li><a href="https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf">Why Functional Programming Matters</a></li>\n<li><a href="http://2ality.com/2015/06/tail-call-optimization.html">Tail call optimization in ECMAScript 6</a></li>\n</ul>',
frontmatter:{title:"함수형 프로그래밍이란?",path:"/what-is-fp/",tags:["javascript","functional programming","function","fp"],date:"September 09, 2017",isNotPost:null}}},pathContext:{path:"/what-is-fp/"}}}});
//# sourceMappingURL=path---what-is-fp-75f853ecce5398654189.js.map