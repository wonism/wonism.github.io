{"version":3,"sources":["webpack:///path---redux-from-scratch-66d7f27265521cc8e9f5.js","webpack:///./.cache/json/redux-from-scratch.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/redux-from-scratch.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","path","tags","category","date","summary","components","rootId","fileName","tweets","isNotPost","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,4EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,+BAAAC,OAAA,WAA0DC,gBAAmBC,GAAA,gIAAAC,KAAA,inRAAo7QC,aAA8kBL,MAAA,aAAAM,KAAA,uBAAAC,MAAA,uCAAAC,SAAA,aAAAC,KAAA,mBAAAC,QAAA,yFAAAC,aAAsQC,OAAA,iBAAAC,SAAA,yBAA4DC,OAAA,KAAAC,UAAA,QAAmCC,aAAgBV,KAAA","file":"path---redux-from-scratch-66d7f27265521cc8e9f5.js","sourcesContent":["webpackJsonp([253668796928328],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/redux-from-scratch.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Wonism ∙ Front-end Developer\",\"author\":\"wonism\"}},\"markdownRemark\":{\"id\":\"/Users/wonism/project/wonism.github.io-gatsby/src/pages/2017-10-05-redux-tutorial/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><code>Redux</code>는 상태를 관리해주는 라이브러리로 <code>React JS</code>, <code>Vue JS</code> 등과 함께 사용되며, 큰 애플리케이션의 상태를 보다 쉽게 할 수 있도록 도와준다.</p>\\n<h2>Flux</h2>\\n<p><code>Redux</code>에 대해 설명하기 앞서, <code>Flux</code>란 아키텍쳐에 대해 설명하겠다.<br />\\n<code>Flux</code>는 단방향 데이터 흐름을 이용함으로써 리액트의 컴퍼넌트들을 보완한다.<br />\\n사용자가 뷰와 상호작용할 때, 뷰는 중앙 디스패쳐를 통해 다양한 <code>store</code>에 <code>액션</code>을 전파한다.<br />\\n(<code>store</code>는 애플리케이션의 데이터와 로직을 가지고 있으며, 데이터와 로직은 상태에 따라 뷰를 업데이트하는 역할을 수행한다.)<br />\\n<code>Flux</code>에는 많은 <code>store</code>가 있으며, 각 <code>store</code>는 상태의 각각 다른 작은 부분이나 애플리케이션의 데이터를 사용한다.</p>\\n<h3>Flux 데이터 흐름</h3>\\n<ol>\\n<li>사용자가 뷰와 상호작용을 하면, 뷰는 <code>액션</code>을 트리거한다.</li>\\n<li><code>액션</code>이 해당 함수를 전달하고, 해당 함수는 <code>store</code>를 변경한다.</li>\\n<li><code>store</code>가 데이터를 갱신하면, 뷰는 이에 따라 갱신된다.</li>\\n</ol>\\n<p>애플리케이션이 커지면, 여러 <code>store</code>가 데이터를 관리하게 된다.</p>\\n<h2>Redux</h2>\\n<p><code>Redux</code>는 예측가능한 상태 컨테이너로 <code>Flux</code>의 구현체이다.<br />\\n하지만 완전한 <code>Flux</code> 구현체라고 보기는 힘들다. <code>Redux</code>는 애플리케이션의 상태를 위해 단 한 개의 스토어를 사용하기 때문이다.\\n대신, <code>Redux</code>의 <code>store</code>는 다양한 상태 객체로 나뉘어진다.</p>\\n<h3>Redux의 세 가지 원칙</h3>\\n<ol>\\n<li>진리의 단일 소스</li>\\n<li>상태는 읽기 전용</li>\\n<li>순수 함수로써 변경이 된다.</li>\\n</ol>\\n<h3>액션</h3>\\n<p><code>Redux</code>의 상태를 변경하기 위해서는 <code>액션</code>을 내보내야한다. <code>액션</code>은 자바스크립트 객체이며, 어떤 일이 발생하는지 설명하는 <code>type</code> 속성을 반드시 가진다. 또한, 상태 변경을 위한 값인 <code>payload</code>를 가진다.<br />\\n이 때, <code>payload</code>는 없을 수도 있으며, <code>2</code>개 이상일 수도 있다. 또한, 속성 이름은 개발자가 임의로 지정할 수 있다.</p>\\n<h3>액션 생성자</h3>\\n<p><code>액션 생성자</code>는 <code>액션</code>을 생성하는 함수이다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> ADD_TODO<span class=\\\"token punctuation\\\">,</span> REMOVE_TODO <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./actionTypes'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> addTodo <span class=\\\"token operator\\\">=</span> text <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> ADD_TODO<span class=\\\"token punctuation\\\">,</span> text <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> removeTodo <span class=\\\"token operator\\\">=</span> index <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> typd<span class=\\\"token punctuation\\\">:</span> REMOVE_TODO<span class=\\\"token punctuation\\\">,</span> index <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>리듀서</h3>\\n<p><code>액션</code>은 단지 어떤 일이 발생할지만을 설명한다. 애플리케이션의 상태가 어떻게 변할지 설명하는 일은 <code>리듀서</code>의 일이다.<br />\\n<code>리듀서</code>는 이전의 상태를 받아 새로운 상태를 반환한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token punctuation\\\">(</span>previousState<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> newState\\n</code></pre>\\n      </div>\\n<p>다음은 <code>리듀서</code> 내부에서 절대 해서는 안 되는 일들이다.</p>\\n<ol>\\n<li><code>리듀서</code>의 인자를 변경하는 일</li>\\n<li>부작용을 일으킬 수 있는 일</li>\\n<li>DB 호출, API 호출, 라우팅 전환</li>\\n<li><code>Date.now()</code>, <code>Math.random()</code>과 같은 순수하지 않은 함수를 호출하는 일</li>\\n</ol>\\n<h3>스토어</h3>\\n<p><code>store</code>는 객체로써 그들을 하나로 모으는 일을 하며, 다음과 같은 일을 한다.</p>\\n<ul>\\n<li>애플리케이션의 상태를 가진다.</li>\\n<li><code>getState()</code>를 통해 상태에 접근할 수 있다.</li>\\n<li><code>dispatch(action)</code>를 통해 상태를 업데이트할 수 있다.</li>\\n<li><code>subscribe(listener)</code>를 통해 리스너를 등록할 수 있다.</li>\\n<li><code>subscribe(listener)</code>에 의해 반환된 함수를 호출함으로써 리스너의 등록 취소를 할 수 있다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createStore <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> todoReducer <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./todo/reducers'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createStore</span><span class=\\\"token punctuation\\\">(</span>todoReducer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>Redux 구현해보기</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// src/index.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> render <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Provider <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-redux'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> App <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./app'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Provider<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Provider<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>react-redux</code>의 <code>Provider</code>는 전체 애플리케이션을 통해 <code>store</code> 를 제공하며, <code>&#x3C;App /></code>은 <code>&#x3C;Provider /></code>에 의해 감싸져 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// src/app/index.js</span>\\n<span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> PureComponent <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">PureComponent</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        App Component\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>Container components</h3>\\n<p><code>Container 컴퍼넌트</code>는 애플리케이션의 상태와 직접 상호작용하는 컴퍼넌트이다.<br />\\n<code>store</code>에 접근할 수 있으며, <code>액션</code>을 가져오거나 애플리케이션의 현재 상태를 가져올 수 있다.<br />\\n<code>Container 컴퍼넌트</code>는 <code>store</code>가 변경되면, 새로운 상태와 뷰의 변화를 구독한다.</p>\\n<h3>Presentational components</h3>\\n<p><code>Presentational 컴퍼넌트</code>는 하위 컴퍼넌트를 가지지만, <code>store</code>와 상호작용하지는 않는다.</p>\\n<div id=\\\"redux-tutorial\\\"></div>\\n<h2>참조</h2>\\n<ul>\\n<li><a href=\\\"https://github.com/reactjs/redux\\\">Redux github repository</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Redux 튜토리얼\",\"path\":\"/redux-from-scratch/\",\"tags\":[\"javascript\",\"reactjs\",\"redux\",\"flux\"],\"category\":\"JavaScript\",\"date\":\"October 05, 2017\",\"summary\":\"Redux는 상태를 관리해주는 라이브러리로 React JS, Vue JS 등과 함께 사용되며, 큰 애플리케이션의 상태를 보다 쉽게 할 수 있도록 도와준다.\",\"components\":[{\"rootId\":\"redux-tutorial\",\"fileName\":\"redux-tutorial/index\"}],\"tweets\":null,\"isNotPost\":null}}},\"pathContext\":{\"path\":\"/redux-from-scratch/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---redux-from-scratch-66d7f27265521cc8e9f5.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Wonism ∙ Front-end Developer\",\"author\":\"wonism\"}},\"markdownRemark\":{\"id\":\"/Users/wonism/project/wonism.github.io-gatsby/src/pages/2017-10-05-redux-tutorial/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><code>Redux</code>는 상태를 관리해주는 라이브러리로 <code>React JS</code>, <code>Vue JS</code> 등과 함께 사용되며, 큰 애플리케이션의 상태를 보다 쉽게 할 수 있도록 도와준다.</p>\\n<h2>Flux</h2>\\n<p><code>Redux</code>에 대해 설명하기 앞서, <code>Flux</code>란 아키텍쳐에 대해 설명하겠다.<br />\\n<code>Flux</code>는 단방향 데이터 흐름을 이용함으로써 리액트의 컴퍼넌트들을 보완한다.<br />\\n사용자가 뷰와 상호작용할 때, 뷰는 중앙 디스패쳐를 통해 다양한 <code>store</code>에 <code>액션</code>을 전파한다.<br />\\n(<code>store</code>는 애플리케이션의 데이터와 로직을 가지고 있으며, 데이터와 로직은 상태에 따라 뷰를 업데이트하는 역할을 수행한다.)<br />\\n<code>Flux</code>에는 많은 <code>store</code>가 있으며, 각 <code>store</code>는 상태의 각각 다른 작은 부분이나 애플리케이션의 데이터를 사용한다.</p>\\n<h3>Flux 데이터 흐름</h3>\\n<ol>\\n<li>사용자가 뷰와 상호작용을 하면, 뷰는 <code>액션</code>을 트리거한다.</li>\\n<li><code>액션</code>이 해당 함수를 전달하고, 해당 함수는 <code>store</code>를 변경한다.</li>\\n<li><code>store</code>가 데이터를 갱신하면, 뷰는 이에 따라 갱신된다.</li>\\n</ol>\\n<p>애플리케이션이 커지면, 여러 <code>store</code>가 데이터를 관리하게 된다.</p>\\n<h2>Redux</h2>\\n<p><code>Redux</code>는 예측가능한 상태 컨테이너로 <code>Flux</code>의 구현체이다.<br />\\n하지만 완전한 <code>Flux</code> 구현체라고 보기는 힘들다. <code>Redux</code>는 애플리케이션의 상태를 위해 단 한 개의 스토어를 사용하기 때문이다.\\n대신, <code>Redux</code>의 <code>store</code>는 다양한 상태 객체로 나뉘어진다.</p>\\n<h3>Redux의 세 가지 원칙</h3>\\n<ol>\\n<li>진리의 단일 소스</li>\\n<li>상태는 읽기 전용</li>\\n<li>순수 함수로써 변경이 된다.</li>\\n</ol>\\n<h3>액션</h3>\\n<p><code>Redux</code>의 상태를 변경하기 위해서는 <code>액션</code>을 내보내야한다. <code>액션</code>은 자바스크립트 객체이며, 어떤 일이 발생하는지 설명하는 <code>type</code> 속성을 반드시 가진다. 또한, 상태 변경을 위한 값인 <code>payload</code>를 가진다.<br />\\n이 때, <code>payload</code>는 없을 수도 있으며, <code>2</code>개 이상일 수도 있다. 또한, 속성 이름은 개발자가 임의로 지정할 수 있다.</p>\\n<h3>액션 생성자</h3>\\n<p><code>액션 생성자</code>는 <code>액션</code>을 생성하는 함수이다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> ADD_TODO<span class=\\\"token punctuation\\\">,</span> REMOVE_TODO <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./actionTypes'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> addTodo <span class=\\\"token operator\\\">=</span> text <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> ADD_TODO<span class=\\\"token punctuation\\\">,</span> text <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> removeTodo <span class=\\\"token operator\\\">=</span> index <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> typd<span class=\\\"token punctuation\\\">:</span> REMOVE_TODO<span class=\\\"token punctuation\\\">,</span> index <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>리듀서</h3>\\n<p><code>액션</code>은 단지 어떤 일이 발생할지만을 설명한다. 애플리케이션의 상태가 어떻게 변할지 설명하는 일은 <code>리듀서</code>의 일이다.<br />\\n<code>리듀서</code>는 이전의 상태를 받아 새로운 상태를 반환한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token punctuation\\\">(</span>previousState<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> newState\\n</code></pre>\\n      </div>\\n<p>다음은 <code>리듀서</code> 내부에서 절대 해서는 안 되는 일들이다.</p>\\n<ol>\\n<li><code>리듀서</code>의 인자를 변경하는 일</li>\\n<li>부작용을 일으킬 수 있는 일</li>\\n<li>DB 호출, API 호출, 라우팅 전환</li>\\n<li><code>Date.now()</code>, <code>Math.random()</code>과 같은 순수하지 않은 함수를 호출하는 일</li>\\n</ol>\\n<h3>스토어</h3>\\n<p><code>store</code>는 객체로써 그들을 하나로 모으는 일을 하며, 다음과 같은 일을 한다.</p>\\n<ul>\\n<li>애플리케이션의 상태를 가진다.</li>\\n<li><code>getState()</code>를 통해 상태에 접근할 수 있다.</li>\\n<li><code>dispatch(action)</code>를 통해 상태를 업데이트할 수 있다.</li>\\n<li><code>subscribe(listener)</code>를 통해 리스너를 등록할 수 있다.</li>\\n<li><code>subscribe(listener)</code>에 의해 반환된 함수를 호출함으로써 리스너의 등록 취소를 할 수 있다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createStore <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> todoReducer <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./todo/reducers'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createStore</span><span class=\\\"token punctuation\\\">(</span>todoReducer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>Redux 구현해보기</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// src/index.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> render <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Provider <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-redux'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> App <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./app'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>Provider<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>App <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Provider<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code>react-redux</code>의 <code>Provider</code>는 전체 애플리케이션을 통해 <code>store</code> 를 제공하며, <code>&#x3C;App /></code>은 <code>&#x3C;Provider /></code>에 의해 감싸져 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// src/app/index.js</span>\\n<span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> PureComponent <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">PureComponent</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        App Component\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>Container components</h3>\\n<p><code>Container 컴퍼넌트</code>는 애플리케이션의 상태와 직접 상호작용하는 컴퍼넌트이다.<br />\\n<code>store</code>에 접근할 수 있으며, <code>액션</code>을 가져오거나 애플리케이션의 현재 상태를 가져올 수 있다.<br />\\n<code>Container 컴퍼넌트</code>는 <code>store</code>가 변경되면, 새로운 상태와 뷰의 변화를 구독한다.</p>\\n<h3>Presentational components</h3>\\n<p><code>Presentational 컴퍼넌트</code>는 하위 컴퍼넌트를 가지지만, <code>store</code>와 상호작용하지는 않는다.</p>\\n<div id=\\\"redux-tutorial\\\"></div>\\n<h2>참조</h2>\\n<ul>\\n<li><a href=\\\"https://github.com/reactjs/redux\\\">Redux github repository</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Redux 튜토리얼\",\"path\":\"/redux-from-scratch/\",\"tags\":[\"javascript\",\"reactjs\",\"redux\",\"flux\"],\"category\":\"JavaScript\",\"date\":\"October 05, 2017\",\"summary\":\"Redux는 상태를 관리해주는 라이브러리로 React JS, Vue JS 등과 함께 사용되며, 큰 애플리케이션의 상태를 보다 쉽게 할 수 있도록 도와준다.\",\"components\":[{\"rootId\":\"redux-tutorial\",\"fileName\":\"redux-tutorial/index\"}],\"tweets\":null,\"isNotPost\":null}}},\"pathContext\":{\"path\":\"/redux-from-scratch/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/redux-from-scratch.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/redux-from-scratch.json\n// module chunks = 253668796928328"],"sourceRoot":""}