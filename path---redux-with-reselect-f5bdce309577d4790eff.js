(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{393:function(n){n.exports={data:{markdownRemark:{id:"/Users/wonism/project/wonism.github.io-gatsby/src/pages/2017-10-30-redux-with-reselect/index.md absPath of file >>> MarkdownRemark",html:'<h2>셀렉터에 대해</h2>\n<p><code class="hljs-text">selector</code>는 <code class="hljs-text">store</code>로부터 온 데이터를 가져오거나 계산하는 역할을 하며, <code class="hljs-text">Redux</code>가 상태를 최소한으로 유지할 수 있도록 한다.<br />\n이 <code class="hljs-text">셀렉터</code>는 인자가 변경될 때까지 다시 계산하는 일이 없기에 효율적이다.<br />\n(이 원리를 이해하기 위해 <a href="/memoization/">메모이제이션에 대해 작성한 글</a>을 참고하면 도움이 될 것이다.)</p>\n<p><strong>+</strong><br />\n<code class="hljs-text">Dan Abramov</code>는 <code class="hljs-text">Reselect</code>에 대해 아래 트윗과 같이 말했다.</p>\n<div id="redux-tweet"></div>\n<h2>왜 리셀렉트인가?</h2>\n<p><code class="hljs-text">Redux</code>를 사용하면서 데이터를 가져올 때, <code class="hljs-text">mapStateToProps</code>와 같은 함수를 통해 상태 데이터를 가져온다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token comment">/**\n * STORE\n *\n * {\n *   height: 180,\n *   weight: 60,\n *   bloodPress: { high: 120, low: 80 },\n * }\n */</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">getBmi</span> <span class="token operator">=</span> <span class="token punctuation">(</span>height<span class="token punctuation">,</span> weight<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>weight <span class="token operator">/</span> <span class="token punctuation">(</span>height <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isHypertension</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> high<span class="token punctuation">,</span> low <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">></span> <span class="token number">140</span> <span class="token operator">&amp;&amp;</span> low <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  bmi<span class="token punctuation">:</span> <span class="token function">getBmi</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>height<span class="token punctuation">,</span> state<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  isHypertension<span class="token punctuation">:</span> <span class="token function">isHypertension</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>bloodPress<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><code class="hljs-text">getBmi</code>는 몸무게와 키를 통해 <code class="hljs-text">bmi</code>를 구하는 함수이다.<br />\n이 함수의 단점은 상태의 일부가 업데이트될 때마다 함수가 데이터를 다시 계산한다는 것이다.<br />\n<code class="hljs-text">BMI</code>와는 상관 없는 <code class="hljs-text">bloodPress</code>가 업데이트되어도 함수가 실행된다.</p>\n<p>하지만, <code class="hljs-text">Reselect</code>를 사용하면 인자가 변경되지 않으면 재계산을 수행하지 않는다.<br />\n<code class="hljs-text">리셀렉트</code>를 사용하면 함수 인자가 메모된 함수에 캐시되기 때문이다.<br />\n오직 함수의 인자가 이전 호출 때의 값과 다를 경우에만 <code class="hljs-text">셀렉터</code>가 다시 계산을 수행한다.</p>\n<h2>리셀렉트 사용하기</h2>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token comment">// selectors.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'reselect\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> fp <span class="token keyword">from</span> <span class="token string">\'lodash/fp\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> getHeight <span class="token operator">=</span> fp<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'height\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> getWeight <span class="token operator">=</span> fp<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'weight\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> getBloodPress <span class="token operator">=</span> fp<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'bloodPress\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> getBmi <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>\n  <span class="token comment">// 맨 아래 함수를 제외한 함수들을 Input Selector 라고도 한다.</span>\n  getHeight<span class="token punctuation">,</span>\n  getWeight<span class="token punctuation">,</span>\n  <span class="token comment">// 맨 아래 함수를 Result Selector 라고도 한다.</span>\n  <span class="token punctuation">(</span>height<span class="token punctuation">,</span> weight<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>weight <span class="token operator">/</span> height <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> isHypertension <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>\n  getBloodPress<span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token punctuation">{</span> high<span class="token punctuation">,</span> low <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">></span> <span class="token number">140</span> <span class="token operator">&amp;&amp;</span> low <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> state <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  bmi<span class="token punctuation">:</span> <span class="token function">getBmi</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  isHypertension<span class="token punctuation">:</span> <span class="token function">isHypertension</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>아래 예제와 같이 <code class="hljs-text">createSelector</code>를 통해 만들어진 <code class="hljs-text">셀렉터</code>는 다른 <code class="hljs-text">셀렉터</code>의 인자로 사용할 수도 있다.<br />\n이는 복잡한 계산을 하기 위한 <code class="hljs-text">셀렉터</code>를 작은 여러 <code class="hljs-text">셀렉터</code>로 구성하여 읽기 쉽게 작성할 수 있음을 뜻한다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token keyword">const</span> isUnderWeight <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>\n  getBmi<span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>bmi<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>bmi <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2>정리</h2>\n<p>어떤 값을 계산함에 있어 불필요한 연산을 수행하지 않을 수 있다는 것만으로도 성능을 개선할 수 있다.<br />\n그리고, <code class="hljs-text">셀렉터</code>를 중첩할 수 있다는 것은 코드의 유연함을 제공하며, 리팩토링도 수월해진다.</p>\n<p><code class="hljs-text">Reselect</code>의 러닝커브도 그렇게 높지 않기 때문에 프로젝트에 <code class="hljs-text">Redux</code>를 사용한다면, <code class="hljs-text">Reselect</code> 도입을 추천한다.</p>',frontmatter:{title:"Reselect로 Redux 성능 개선하기",path:"/redux-with-reselect/",images:["images/redux.jpg"],category:"JavaScript",tags:["javascript","reactjs","redux","reselect","memoization"],date:"2017-10-30T00:03:19.000Z",components:null,tweets:[{rootId:"redux-tweet",userId:"dan_abramov",tweetId:"619531111996223488"}],summary:"selector는 store로부터 온 데이터를 가져오거나 계산하는 역할을 하며, Redux가 상태를 최소한으로 유지할 수 있도록 한다. 이 셀렉터는 인자가 변경될 때까지 다시 계산하는 일이 없기에 효율적이다."}}},pageContext:{}}}}]);
//# sourceMappingURL=path---redux-with-reselect-f5bdce309577d4790eff.js.map