{"version":3,"sources":["webpack:///./src/store/ideas/selectors.js","webpack:///./src/pages/ideas/index.jsx","webpack:///./src/store/ideas/actions.js","webpack:///./src/utils/formattedDate.js","webpack:///./src/components/Common/PostWrapper/index.js"],"names":["getIdeasSubState","get_default","getMenu","Object","lib","createSelector","getData","selectors_isFailed","Z","t","$","nn","en","tn","n","i","IdeasWrapper","PostWrapper","a","extend","_templateObject","ideas_Ideas","componentDidMount","this","props","fetchIdeas","render","_this$props","setIdeasMenu","menu","data","isFailed","react_default","createElement","Helmet_default","name","content","isEmpty_default","className","react_spinners","RingLoader","color","Common_constants","loading","options","Ideas","formatOption","constants","TODOS","TIL","BOOKMARKS","react_dropdown_dist_default","onChange","flow_default","value","isObject_default","toLower_default","map_default","element","keys_default","includes_default","key","isNil_default","doneAt","findIndex_default","add_default","_default","formattedDate","createdAt","link","href","target","rel","dist_default","markdown","e","react","PureComponent","propTypes","prop_types_default","func","isRequired","shape","todos","array","til","bookmarks","bool","oneOf","defaultProps","option","label","capitalize_default","ConnectedIdeas","es","b","state","dispatch","type","actionTypes","d","__webpack_exports__","default","Layout","550","r","l","o","c","u","m","str","_split2","lodash_fp_split__WEBPACK_IMPORTED_MODULE_3___default","date","time","lodash_fp_flow__WEBPACK_IMPORTED_MODULE_2___default","lodash_fp_slice__WEBPACK_IMPORTED_MODULE_1___default","lodash_fp_join__WEBPACK_IMPORTED_MODULE_0___default","section"],"mappings":"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","file":"component---src-pages-ideas-index-jsx-37814d8661f83a888500.js","sourcesContent":["import { createSelector } from 'reselect';\nimport fp from 'lodash/fp';\n\nconst getIdeasSubState = fp.get('ideas');\n\nexport const getMenu = createSelector(\n  getIdeasSubState,\n  fp.get('menu')\n);\n\nexport const getData = createSelector(\n  getIdeasSubState,\n  fp.get('data')\n);\n\nexport const isFailed = createSelector(\n  getIdeasSubState,\n  fp.get('failed')\n);\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Helmet from 'react-helmet';\nimport MarkdownRenderer from 'react-markdown-renderer';\nimport Dropdown from '@wonism/react-dropdown';\nimport { RingLoader } from 'react-spinners';\nimport fp from 'lodash/fp';\nimport { TODOS, TIL, BOOKMARKS } from '~/constants';\nimport * as ideasActions from '~/store/ideas/actions';\nimport * as ideasSelectors from '~/store/ideas/selectors';\nimport Layout from '~/components/Layout';\nimport PostWrapper from '~/components/Common/PostWrapper';\nimport { PRIMARY_COLOR } from '~/components/Common/constants';\nimport formattedDate from '~/utils/formattedDate';\nimport './index.scss';\n\nconst IdeasWrapper = PostWrapper.extend`\n  margin: auto;\n  padding: 120px 0 20px;\n  max-width: 720px;\n  min-height: 100vh;\n  text-align: center;\n  @media (max-width: 1024px) {\n    padding: 70px 16px 20px 24px;\n  }\n\n  .loading-wrapper {\n    & > div {\n      margin: auto;\n    }\n  }\n\n  ul {\n    text-align: left;\n  }\n\n  li {\n    margin: 16px 0 0;\n    font-size: 14px;\n    font-weight: 400;\n\n    &.strike {\n      text-decoration: line-through;\n    }\n\n    & > span {\n      float: left;\n      margin: 0 4px 0 0;\n    }\n  }\n\n  pre {\n    margin: 16px 0 0;\n    padding: 0 0 8px 0;\n    overflow-x: auto;\n    overflow-y: hidden;\n  }\n\n  code {\n    color: #555;\n    font-weight: 300;\n  }\n\n  small {\n    display: block;\n    margin: 8px 0;\n    font-size: 10px;\n  }\n`;\n\nclass Ideas extends PureComponent {\n  static propTypes = {\n    fetchIdeas: PropTypes.func.isRequired,\n    setIdeasMenu: PropTypes.func.isRequired,\n    data: PropTypes.shape({\n      todos: PropTypes.array,\n      til: PropTypes.array,\n      bookmarks: PropTypes.array,\n    }),\n    isFailed: PropTypes.bool.isRequired,\n    menu: PropTypes.oneOf([TODOS, TIL, BOOKMARKS]).isRequired,\n  };\n\n  static defaultProps = {\n    data: null,\n  };\n\n  static formatOption = option => ({\n    value: option,\n    label: fp.capitalize(option),\n  });\n\n  componentDidMount() {\n    this.props.fetchIdeas();\n  }\n\n  render() {\n    const { setIdeasMenu, menu, data, isFailed } = this.props;\n\n    if (isFailed) {\n      return (\n        <IdeasWrapper>\n          <Helmet>\n            <title>WONISM | IDEAS</title>\n            <meta name=\"og:title\" content=\"WONISM | IDEAS\" />\n          </Helmet>\n          Failed to fetch datas\n        </IdeasWrapper>\n      );\n    }\n\n    if (fp.isEmpty(data)) {\n      return (\n        <IdeasWrapper>\n          <Helmet>\n            <title>WONISM | IDEAS</title>\n            <meta name=\"og:title\" content=\"WONISM | IDEAS\" />\n          </Helmet>\n          <div className=\"loading-wrapper\">\n            <RingLoader\n              color={PRIMARY_COLOR}\n              loading\n            />\n          </div>\n        </IdeasWrapper>\n      );\n    }\n\n    const options = [\n      Ideas.formatOption(TODOS),\n      Ideas.formatOption(TIL),\n      Ideas.formatOption(BOOKMARKS),\n    ];\n\n    return (\n      <IdeasWrapper>\n        <Helmet>\n          <title>WONISM | IDEAS</title>\n          <meta name=\"og:title\" content=\"WONISM | IDEAS\" />\n        </Helmet>\n        <Dropdown\n          options={options}\n          onChange={fp.flow(fp.get('value'), setIdeasMenu)}\n          value={Ideas.formatOption(menu)}\n        />\n        <ul>\n          {fp.isObject(data) ? (\n            fp.flow(\n              fp.get(fp.toLower(menu)),\n              fp.map((element) => {\n                // todos\n                if (fp.flow(fp.keys, fp.includes('doneAt'))(element)) {\n                  return (\n                    <li key={element.content} className={fp.isNil(element.doneAt) ? '' : 'strike'}>\n                      <span>\n                        {fp.flow(\n                          fp.get(fp.toLower(menu)),\n                          fp.findIndex({ content: element.content }),\n                          fp.add(1),\n                          fp.add(fp.__, '. ')\n                        )(data)}\n                      </span>\n                      {element.content}\n                      <br />\n                      <small>- {formattedDate(element.createdAt)}</small>\n                    </li>\n                  );\n                }\n\n                // bookmarks\n                if (fp.flow(fp.keys, fp.includes('link'))(element)) {\n                  return (\n                    <li key={element.link}>\n                      <span>\n                        {fp.flow(\n                          fp.get(fp.toLower(menu)),\n                          fp.findIndex({ link: element.link }),\n                          fp.add(1),\n                          fp.add(fp.__, '. ')\n                        )(data)}\n                      </span>\n                      <a href={element.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {element.name}\n                      </a>\n                    </li>\n                  );\n                }\n\n                // til\n                if (fp.flow(fp.keys, fp.includes('createdAt'))(element)) {\n                  return (\n                    <li key={element.content}>\n                      <span>\n                        {fp.flow(\n                          fp.get(fp.toLower(menu)),\n                          fp.findIndex({ content: element.content }),\n                          fp.add(1),\n                          fp.add(fp.__, '. ')\n                        )(data)}\n                      </span>\n                      <MarkdownRenderer markdown={element.content} />\n                      <small>- {formattedDate(element.createdAt)}</small>\n                    </li>\n                  );\n                }\n\n                return null;\n              })\n            )(data)\n          ) : null}\n        </ul>\n      </IdeasWrapper>\n    );\n  }\n}\n\nconst ConnectedIdeas = connect(\n  state => ({\n    menu: ideasSelectors.getMenu(state),\n    data: ideasSelectors.getData(state),\n    isFailed: ideasSelectors.isFailed(state),\n  }),\n  {\n    fetchIdeas: ideasActions.fetchIdeas,\n    setIdeasMenu: ideasActions.setIdeasMenu,\n  }\n)(Ideas);\n\nconst IdeasLayout = props => (\n  <Layout {...props}>\n    <ConnectedIdeas />\n  </Layout>\n);\n\nexport default IdeasLayout;\n","import {\n  FETCH_IDEAS,\n  SET_IDEAS_MENU,\n} from './actionTypes';\n\nexport const fetchIdeas = () =>\n  dispatch =>\n    dispatch({\n      type: FETCH_IDEAS,\n    });\n\nexport const setIdeasMenu = menu =>\n  dispatch =>\n    dispatch({\n      type: SET_IDEAS_MENU,\n      menu,\n    });\n","import fp from 'lodash/fp';\n\nexport default (str) => {\n  const [date, time] = fp.split('T')(str);\n\n  return `${date} ${fp.flow(fp.slice(0, 5), fp.join(''))(time)}`;\n};\n","import styled from 'styled-components';\n\nconst PostWrapper = styled.section`\n  margin: auto;\n  padding: 120px 0 0;\n  max-width: 720px;\n  min-height: 100vh;\n  font-size: 14px;\n  @media (max-width: 1024px) {\n    padding: 70px 16px 0;\n  }\n\n  &:before,\n  &:after {\n    display: block;\n    content: '';\n    clear: both;\n  }\n\n  h1 {\n    margin: .67em 0;\n    font-size: 36px;\n  }\n\n  time {\n    margin: 1em 0;\n    font-size: 14px;\n  }\n`;\n\nexport default PostWrapper;\n"],"sourceRoot":""}