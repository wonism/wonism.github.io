{"version":3,"sources":["webpack:///path---arrow-function-f22dc8382bb783a19305.js","webpack:///./.cache/json/arrow-function.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/arrow-function.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","path","tags","date","isNotPost","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,wEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,+BAAAC,OAAA,WAA0DC,gBAAmBC,GAAA,gIAAAC,KAAA,qmdAAizeC,aAAyHL,MAAA,cAAAM,KAAA,mBAAAC,MAAA,wDAAAC,KAAA,qBAAAC,UAAA,QAA+JC,aAAgBJ,KAAA","file":"path---arrow-function-f22dc8382bb783a19305.js","sourcesContent":["webpackJsonp([12135140460054990000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/arrow-function.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Wonism ∙ Front-end Developer\",\"author\":\"wonism\"}},\"markdownRemark\":{\"id\":\"/Users/wonism/project/wonism.github.io-gatsby/src/pages/2017-09-10-arrow-function/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><code>화살표함수</code>는 <code>ES2015</code>에서 사용할 수 있는 함수 표현식으로 익명함수를 축약하여 표현할 수 있다. 이 화살표함수는 편리하면서도 특이한 성질이 있는데, 이에 대해 알아보겠다.</p>\\n<h2>표현식</h2>\\n<p><code>ES2015</code>에서는 익명함수를 <code>=></code>로 축약하여 나타낼 수 있다. 함수 표현식에 비하면 구문이 상당히 짧다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* Function expression */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">square</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> n <span class=\\\"token operator\\\">*</span> n<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* Arrow function */</span>\\n<span class=\\\"token keyword\\\">const</span> square <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> n <span class=\\\"token operator\\\">*</span> n<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* Arrow function without block */</span>\\n<span class=\\\"token keyword\\\">const</span> square <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> n <span class=\\\"token operator\\\">*</span> n<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 블록을 사용하지 않는다면, return을 생략한채로 값을 반환할 수 있다.</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* Arrow function with multiple parameters */</span>\\n<span class=\\\"token keyword\\\">const</span> power <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> n <span class=\\\"token operator\\\">**</span> e<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 여러 개의 인자를 사용할 떄에는 파라미터들을 ()로 묶어줘야 한다.</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* Arrow function returns simple object */</span>\\n<span class=\\\"token keyword\\\">const</span> createObj <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  number<span class=\\\"token punctuation\\\">:</span> n<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 단순 객체를 반환하기 위해서는 객체 리터럴을 ()로 묶어줘야 한다.</span>\\n</code></pre>\\n      </div>\\n<h2>화살표 함수와 this</h2>\\n<p>화살표 함수는 자기 고유의 <code>this</code>값을 갖지 않으며, <code>this</code>는 화살표 함수를 감싸는 외부 스코프로부터 계승받는다.<br />\\n다음 코드는 함수 표현식과 비교한 예제이다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>passedTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>passedTime<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> t1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1초마다 t를 확인해보면, passedTime은 0이다.</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// setInterval의 인자인 함수 안에 있는 this는 Timer의 생성자에 의해 생성되기 때문이다.</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 이를 제대로 동작하게 하기 위해선 this 객체를 다른 변수에 등록하여 사용하거나,</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> that <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  that<span class=\\\"token punctuation\\\">.</span>passedTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    that<span class=\\\"token punctuation\\\">.</span>passedTime<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> t2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// bind 메소드를 통해 Timer의 this를 바인딩한다.</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>passedTime  <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>passedTime<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> t3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// this를 바인딩하거나, 참조하는 변수를 사용하는 방식대신,</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 화살표 함수를 사용하면, 훨씬 간편하다.</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>passedTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>passedTime<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> t4 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>화살표 함수와 arguments</h2>\\n<p>화살표함수에서는 <code>arguments</code>를 사용할 수 없다.<br />\\n일반적인 함수 표현식에서는 전달받은 인자를 <code>arguments</code>라는 유사배열로써 접근할 수 있었지만, 화살표 함수에서는 이를 사용할 수 없다.<br />\\n이와 같은 기능을 사용하고 싶다면, <code>spread operator</code>를 사용해야 한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Function expression</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> len <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> len<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1, 2, 3</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Arrow function</span>\\n<span class=\\\"token keyword\\\">const</span> func2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> len <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> len<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Throw error when execute this function</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// func2(1, 2, 3);</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Arrow function with rest parameters</span>\\n<span class=\\\"token keyword\\\">const</span> func3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> len <span class=\\\"token operator\\\">=</span> args<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> len<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">func3</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1, 2, 3</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"화살표 함수에 대해서\",\"path\":\"/arrow-function/\",\"tags\":[\"javascript\",\"arrow function\",\"es2015\",\"this\",\"lambda\"],\"date\":\"September 10, 2017\",\"isNotPost\":null}}},\"pathContext\":{\"path\":\"/arrow-function/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---arrow-function-f22dc8382bb783a19305.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Wonism ∙ Front-end Developer\",\"author\":\"wonism\"}},\"markdownRemark\":{\"id\":\"/Users/wonism/project/wonism.github.io-gatsby/src/pages/2017-09-10-arrow-function/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><code>화살표함수</code>는 <code>ES2015</code>에서 사용할 수 있는 함수 표현식으로 익명함수를 축약하여 표현할 수 있다. 이 화살표함수는 편리하면서도 특이한 성질이 있는데, 이에 대해 알아보겠다.</p>\\n<h2>표현식</h2>\\n<p><code>ES2015</code>에서는 익명함수를 <code>=></code>로 축약하여 나타낼 수 있다. 함수 표현식에 비하면 구문이 상당히 짧다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* Function expression */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">square</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> n <span class=\\\"token operator\\\">*</span> n<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* Arrow function */</span>\\n<span class=\\\"token keyword\\\">const</span> square <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> n <span class=\\\"token operator\\\">*</span> n<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* Arrow function without block */</span>\\n<span class=\\\"token keyword\\\">const</span> square <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> n <span class=\\\"token operator\\\">*</span> n<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 블록을 사용하지 않는다면, return을 생략한채로 값을 반환할 수 있다.</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* Arrow function with multiple parameters */</span>\\n<span class=\\\"token keyword\\\">const</span> power <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> n <span class=\\\"token operator\\\">**</span> e<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 여러 개의 인자를 사용할 떄에는 파라미터들을 ()로 묶어줘야 한다.</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* Arrow function returns simple object */</span>\\n<span class=\\\"token keyword\\\">const</span> createObj <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  number<span class=\\\"token punctuation\\\">:</span> n<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 단순 객체를 반환하기 위해서는 객체 리터럴을 ()로 묶어줘야 한다.</span>\\n</code></pre>\\n      </div>\\n<h2>화살표 함수와 this</h2>\\n<p>화살표 함수는 자기 고유의 <code>this</code>값을 갖지 않으며, <code>this</code>는 화살표 함수를 감싸는 외부 스코프로부터 계승받는다.<br />\\n다음 코드는 함수 표현식과 비교한 예제이다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>passedTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>passedTime<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> t1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1초마다 t를 확인해보면, passedTime은 0이다.</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// setInterval의 인자인 함수 안에 있는 this는 Timer의 생성자에 의해 생성되기 때문이다.</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 이를 제대로 동작하게 하기 위해선 this 객체를 다른 변수에 등록하여 사용하거나,</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> that <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  that<span class=\\\"token punctuation\\\">.</span>passedTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    that<span class=\\\"token punctuation\\\">.</span>passedTime<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> t2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// bind 메소드를 통해 Timer의 this를 바인딩한다.</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>passedTime  <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>passedTime<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> t3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// this를 바인딩하거나, 참조하는 변수를 사용하는 방식대신,</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 화살표 함수를 사용하면, 훨씬 간편하다.</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>passedTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>passedTime<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> t4 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>화살표 함수와 arguments</h2>\\n<p>화살표함수에서는 <code>arguments</code>를 사용할 수 없다.<br />\\n일반적인 함수 표현식에서는 전달받은 인자를 <code>arguments</code>라는 유사배열로써 접근할 수 있었지만, 화살표 함수에서는 이를 사용할 수 없다.<br />\\n이와 같은 기능을 사용하고 싶다면, <code>spread operator</code>를 사용해야 한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Function expression</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> len <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> len<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1, 2, 3</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Arrow function</span>\\n<span class=\\\"token keyword\\\">const</span> func2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> len <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> len<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Throw error when execute this function</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// func2(1, 2, 3);</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Arrow function with rest parameters</span>\\n<span class=\\\"token keyword\\\">const</span> func3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> len <span class=\\\"token operator\\\">=</span> args<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> len<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">func3</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1, 2, 3</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"화살표 함수에 대해서\",\"path\":\"/arrow-function/\",\"tags\":[\"javascript\",\"arrow function\",\"es2015\",\"this\",\"lambda\"],\"date\":\"September 10, 2017\",\"isNotPost\":null}}},\"pathContext\":{\"path\":\"/arrow-function/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/arrow-function.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/arrow-function.json\n// module chunks = 12135140460054990000"],"sourceRoot":""}