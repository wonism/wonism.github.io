{"data":{"markdownRemark":{"id":"3110b53b-acbb-5d8c-936d-31b82e5753f3 >>> MarkdownRemark","html":"<h2>Generator Function</h2>\n<p><code class=\"hljs-text\">Generator Function</code>는 사용자의 요구에 따라 다른 시간 간격으로 여러 값을 반환할 수 있으며, 내부 상태를 관리할 수 있는 함수이며, <code class=\"hljs-text\">function* generatorFunction() { /* ... */ }</code>와 같이 사용한다.</p>\n<p>단 한 번의 실행으로 함수의 끝까지 실행이 완료되는 일반 함수와는 달리,<br />\n제너레이터 함수는 사용자의 요구에 따라 (<code class=\"hljs-text\">yield</code>와 <code class=\"hljs-text\">next</code>를 통해) 일시적으로 정지될 수도 있고, 다시 시작될 수도 있다.<br />\n또한, 제너레이터 함수의 반환으로는 제너레이터가 반환된다.</p>\n<h2>Generator</h2>\n<p><code class=\"hljs-text\">Generator</code>는 이 제너레이터 함수의 반환으로 iterable 프로토콜과 iterator 프로토콜을 따르는 객체이다.<br />\n이 때, 제너레이터의 이터러블에서 반환하는 이터레이터는 자기 자신이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generatorFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> generator <span class=\"token operator\">=</span> <span class=\"token function\">generatorFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngenerator <span class=\"token operator\">===</span> generator<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이 말인 즉슨, 제너레이터의 이터러블은 다음과 같은 방식으로 구현되어 있을 거라는 것을 암시한다.</span>\n<span class=\"token comment\">// generator[Symbol.iterator] = () => this;</span></code></pre>\n      </div>\n<h2>yield / next</h2>\n<p><code class=\"hljs-text\">yield</code>는 제너레이터 함수의 실행을 일시적으로 정지시키며, <code class=\"hljs-text\">yield</code> 뒤에 오는 표현식은 제너레이터의 caller에게 반환된다.<br />\n즉, 일반 함수의 <code class=\"hljs-text\">return</code>과 매우 유사하다고 볼 수 있다.</p>\n<p>여기서 제너레이터 함수는 Callee이고, 이를 호출하는 함수가 Caller이며, Caller는 Callee의 <code class=\"hljs-text\">yield</code> 부분에서 다음 statement로 진행을 할 지 여부를 제어한다. 이는 <code class=\"hljs-text\">next</code>로 인해 재개될 수 있다.</p>\n<p><code class=\"hljs-text\">yield</code>와 <code class=\"hljs-text\">next</code>의 관계를 보고 이러한 의문이 생길 수 있다. <code class=\"hljs-text\">모든 yield를 처리하기 위해 그만큼의 next를 사용해야 하나?</code><br />\n그럴 수도 있고, 아닐 수도 있다.</p>\n<p><code class=\"hljs-text\">next</code>를 일일이 호출하지 않고, programmitically하게 호출하게 하려면, 다음과 같이 재귀 호출을 하면 된다.<br />\n아래 예제 코드는 홀수는 그대로 출력을 하고, 짝수에는 <code class=\"hljs-text\">1</code>을 더하여 출력하는 Runner이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sampleGFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">yield</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">yield</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">yield</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> it <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span>sampleGFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 11</span>\n<span class=\"token comment\">// 5</span>\n<span class=\"token comment\">// 1</span></code></pre>\n      </div>\n<h2>제너레이터 함수에서의 return</h2>\n<p><code class=\"hljs-text\">return</code>은 수행되고 있는 이터레이터를 종료시키며, <code class=\"hljs-text\">return</code> 뒤에 오는 값은 <code class=\"hljs-text\">IteratorResult</code> 객체의 <code class=\"hljs-text\">value</code> 프로퍼티에 할당되며, <code class=\"hljs-text\">done</code> 프로퍼티는 <code class=\"hljs-text\">true</code>가 할당된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sampleGFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> generator <span class=\"token operator\">=</span> <span class=\"token function\">sampleGFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 42, done: true }</span></code></pre>\n      </div>\n<h2>제너레이터 종료하기</h2>\n<p>제너레이터에는 <code class=\"hljs-text\">next</code> 외에도 <code class=\"hljs-text\">throw</code>, <code class=\"hljs-text\">return</code> 등의 메소드가 있는데, 이 <code class=\"hljs-text\">return</code>과 <code class=\"hljs-text\">throw</code>를 통해 제너레이터를 종료할 수 있다. 다만, 이 둘은 조금의 차이가 있다.</p>\n<h3>return</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[ENTERED]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">yield</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[ERROR]'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> withReturn <span class=\"token operator\">=</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withReturn<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withReturn<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withReturn<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withReturn<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withReturn<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [ENTERED]</span>\n<span class=\"token comment\">// { value: 0, done: false }</span>\n<span class=\"token comment\">// { value: 1, done: false }</span>\n<span class=\"token comment\">// { value: 2, done: false }</span>\n<span class=\"token comment\">// { value: 3, done: false }</span>\n<span class=\"token comment\">// { value: 42, done: true }</span></code></pre>\n      </div>\n<p><code class=\"hljs-text\">return</code>이 호출되고 나면, <code class=\"hljs-text\">value</code>에는 <code class=\"hljs-text\">return</code>의 인자가 할당되고, <code class=\"hljs-text\">done</code>은 <code class=\"hljs-text\">true</code>가 된다.</p>\n<h3>return with try/finally</h3>\n<p><code class=\"hljs-text\">return</code>메소드가 호출되었을 때 제너레이터 함수의 코드가 <code class=\"hljs-text\">try / finally</code> 안에 있으면, 시퀸스가 종료되지 않는다.<br />\n<code class=\"hljs-text\">return</code> 이후 <code class=\"hljs-text\">finally</code>블록의 <code class=\"hljs-text\">yield</code> 표현식이 실행되며, 시퀸스는 결국 <code class=\"hljs-text\">return</code>에 전달된 값으로 종료된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">oneToX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> withReturnWithFinally <span class=\"token operator\">=</span> <span class=\"token function\">oneToX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withReturnWithFinally<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 1, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withReturnWithFinally<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 2, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withReturnWithFinally<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 3, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withReturnWithFinally<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 4, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withReturnWithFinally<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 6, done: true }</span></code></pre>\n      </div>\n<h3>throw</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">const</span> withThrow <span class=\"token operator\">=</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withThrow<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withThrow<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withThrow<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withThrow<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withThrow<span class=\"token punctuation\">.</span><span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [ENTERED]</span>\n<span class=\"token comment\">// { value: 0, done: false }</span>\n<span class=\"token comment\">// { value: 1, done: false }</span>\n<span class=\"token comment\">// { value: 2, done: false }</span>\n<span class=\"token comment\">// { value: 3, done: false }</span>\n<span class=\"token comment\">// { value: undefined, done: true }</span></code></pre>\n      </div>\n<p><code class=\"hljs-text\">throw</code>가 호출되고 나면, <code class=\"hljs-text\">catch</code> 블록에 <code class=\"hljs-text\">throw</code>의 인자가 전달된다.</p>\n<h3>throw with yield</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[ENTERED]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">yield</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> e<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> withThrowWithYield <span class=\"token operator\">=</span> <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withThrowWithYield<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withThrowWithYield<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withThrowWithYield<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withThrowWithYield<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withThrowWithYield<span class=\"token punctuation\">.</span><span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>withThrowWithYield<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [ENTERED]</span>\n<span class=\"token comment\">// { value: 0, done: false }</span>\n<span class=\"token comment\">// { value: -1, done: false }</span>\n<span class=\"token comment\">// { value: -2, done: false }</span>\n<span class=\"token comment\">// { value: -3, done: false }</span>\n<span class=\"token comment\">// { value: Infinity, done: false }</span>\n<span class=\"token comment\">// { value: undefined, done: true }</span></code></pre>\n      </div>\n<p><code class=\"hljs-text\">catch</code>에서 <code class=\"hljs-text\">yield</code>를 사용하게 되면, <code class=\"hljs-text\">next</code>를 <code class=\"hljs-text\">n</code> 번 더 사용할 때까지 이터레이터는 끝나지 않는다.</p>\n<h2>yield*</h2>\n<p><code class=\"hljs-text\">yield</code>에 <code class=\"hljs-text\">*</code>를 붙여 사용하게 되면, <code class=\"hljs-text\">yield*</code>와 함께 표현된 이터러블 객체를 순회하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">iterableYield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">=></span> el <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">**</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">=></span> el <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">**</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> c<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">=></span> el <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">**</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> it <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span>iterableYield<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { value: 1, done: false }</span>\n<span class=\"token comment\">// { value: 10, done: false }</span>\n<span class=\"token comment\">// { value: 20, done: false }</span>\n<span class=\"token comment\">// { value: 30, done: false }</span>\n<span class=\"token comment\">// { value: 2, done: false }</span>\n<span class=\"token comment\">// { value: 100, done: false }</span>\n<span class=\"token comment\">// { value: 200, done: false }</span>\n<span class=\"token comment\">// { value: 300, done: false }</span>\n<span class=\"token comment\">// { value: 3, done: false }</span>\n<span class=\"token comment\">// { value: 1000, done: false }</span>\n<span class=\"token comment\">// { value: 2000, done: false }</span>\n<span class=\"token comment\">// { value: 3000, done: false }</span>\n<span class=\"token comment\">// { value: undefined, done: true }</span></code></pre>\n      </div>\n<h2>다른 Generator Function에 컨텍스트 위임하기</h2>\n<p>제너레이터는 앞서 살펴본 <code class=\"hljs-text\">yield*</code>를 통해 다른 제너레이터 함수를 실행할 수 있다.\n이 때, 아래 예제에서 <code class=\"hljs-text\">innerGenerator</code> 를 호출하면 객체가 반환되지만, 실제로 <code class=\"hljs-text\">innerGenerator</code>가 실행되지는 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">innerGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> innerGen <span class=\"token operator\">=</span> <span class=\"token function\">innerGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Did nothing</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>innerGen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">innerGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [1, 2, 3, 'a', 'b', 'c']</span></code></pre>\n      </div>\n<h2>Iterable한 Generator</h2>\n<p>여기까지의 설명으로 보아 제너레이터는 이터러블한 것을 알 수 있을 것이다.<br />\n따라서, <code class=\"hljs-text\">for..of</code> 반복문을 통해 제너레이터를 순회할 수 있으며, <code class=\"hljs-text\">...</code> 연산자를 사용할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generateName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'W'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// for..of</span>\n<span class=\"token keyword\">const</span> genForForOf <span class=\"token operator\">=</span> <span class=\"token function\">generateName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> genForForOf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// W</span>\n<span class=\"token comment\">// O</span>\n<span class=\"token comment\">// N</span>\n<span class=\"token comment\">// I</span>\n<span class=\"token comment\">// S</span>\n<span class=\"token comment\">// M</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> genForSpread <span class=\"token operator\">=</span> <span class=\"token function\">generateName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>genForSpread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['W', 'O', 'N', 'I', 'S', 'M']</span></code></pre>\n      </div>\n<h2>기타</h2>\n<p>제너레이터를 사용한 라이브러리는 <a href=\"http://github.com/tj\">TJ</a>의 <a href=\"https://github.com/tj/co\">co</a>, Node.js의 프레임워크 중 하나인 <a href=\"https://koajs.com/\">Koa</a>, 비동기 처리를 위한 리덕스 미들웨어인 <a href=\"https://github.com/redux-saga/redux-saga\">Redux Saga</a> 등이 있다.</p>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\">MDN : Iterators and generators</a></li>\n<li><a href=\"http://exploringjs.com/es6/ch_generators.html\">Exploring JS: Generators</a></li>\n</ul>","frontmatter":{"title":"JavaScript Generator 이해하기","path":"/javascript-generator/","images":["images/js.jpg"],"category":"JavaScript","tags":["javascript","generator","yield"],"date":"2018-08-08T00:35:14.000Z","components":null,"tweets":null,"summary":"Generator Function는 사용자의 요구에 따라 다른 시간 간격으로 여러 값을 반환할 수 있으며, 내부 상태를 관리할 수 있는 함수이며, function* generatorFunction() { /* ... */ }와 같이 사용한다."}}},"pageContext":{}}