{"data":{"markdownRemark":{"id":"a3646e64-7d54-5bb2-82d4-ba9942c418e6 >>> MarkdownRemark","html":"<h2>Iteration</h2>\n<p>Iteration 프로토콜에는 두 가지 프로토콜이 있다. 한 가지는 <code class=\"hljs-text\">iterable</code> 프로토콜이고 또 다른 한 가지는 <code class=\"hljs-text\">iterator</code> 프로토콜이다.<br />\nES2015에서 추가된 이 두 가지는 새로운 빌트인 혹은 구문이 아닌 프로토콜 즉, 규약이다. 이들은 같은 규칙을 준수하는 객체에 의해 구현될 수 있다.</p>\n<h2>Iterables</h2>\n<p><code class=\"hljs-text\">iterable</code> 프로토콜은 반복 가능한 객체를 나타내는 프로토콜로 <code class=\"hljs-text\">for..of</code> 등에서 반복되는 행동을 정의하는 객체를 <code class=\"hljs-text\">반복 가능</code>하다고 한다.<br />\n반복 가능한 객체로는 내장 객체인 <code class=\"hljs-text\">Array</code>, <code class=\"hljs-text\">Map</code>, <code class=\"hljs-text\">Set</code>, <code class=\"hljs-text\">String</code> 등이 있다. 또한, <code class=\"hljs-text\">[Symbol.iterator]</code>라는 키를 가진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token comment\">// example of usage</span>\n<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre>\n      </div>\n<p>반복가능한 객체를 만들기 위해서는 <code class=\"hljs-text\">[Symbol.iterator]</code>라는 키에 <code class=\"hljs-text\">next</code>라는 메소드를 가지는 객체를 반환하는 함수를 할당한다. 이 때, 이 함수의 반환 값은 <code class=\"hljs-text\">value</code> 프로퍼티를 가진 객체이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      next<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> v <span class=\"token keyword\">of</span> iterator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Infinity loop</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>하지만, 이런 경우는 시퀸스가 무한하기 때문에 <code class=\"hljs-text\">for..of</code> 루프 사용 시 조건문을 사용해야 한다.</p>\n<h2>Iterator</h2>\n<p><code class=\"hljs-text\">iterator</code> 프로토콜은 반복 가능한 객체의 값을 시퀸스대로 처리하는 프로토콜로 다음은 반복자에 대한 설명이다.</p>\n<ol>\n<li>컬렉션 내의 항목에 대해 한 번에 하나씩 접근하면서 현재의 위치를 추적하는 방법을 알고 있는 객체</li>\n<li>반복 가능 인터페이스에 의해 반환되는 객체</li>\n</ol>\n<p>반복자 객체는 <code class=\"hljs-text\">next</code> 메소드를 통해 다음 시퀸스를 진행하게 된다. 이 메소드는 위에서 살펴본 대로 <code class=\"hljs-text\">value</code>와 <code class=\"hljs-text\">done</code>을 가진 객체를 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      next<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// ...</span></code></pre>\n      </div>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">MDN : Iteration protocols</a></li>\n</ul>","frontmatter":{"title":"JavaScript iterables와 iterator 이해하기","path":"/javascript-iteration-protocol/","images":["images/js.jpg"],"category":"JavaScript","tags":["javascript","iterator","iterables"],"date":"2018-08-08T19:48:56.000Z","components":null,"tweets":null,"summary":"Iteration 프로토콜에는 두 가지 프로토콜이 있다. 한 가지는 iterable 프로토콜이고 또 다른 한 가지는 iterator 프로토콜이다."}}},"pageContext":{}}