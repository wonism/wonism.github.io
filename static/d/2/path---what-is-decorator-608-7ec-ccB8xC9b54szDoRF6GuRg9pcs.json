{"data":{"markdownRemark":{"id":"5a0afa77-5347-5292-aa48-3bbcf22eccd4 >>> MarkdownRemark","html":"<h2>Descriptor</h2>\n<p>데코레이터를 이해하기 전에 <code class=\"hljs-text\">설명자</code>(<code class=\"hljs-text\">Descriptor</code>)에 대해 먼저 알아야 한다.<br />\n설명자는 자바스크립트 객체의 프로퍼티로 프로퍼티가 쓰기 가능한지 열거 가능한지 여부를 나타낸다.<br />\n간단한 객체를 만든 뒤, 프로퍼티를 추가하면 각 프로퍼티는 기본 프로퍼티 설명자를 가진다.</p>\n<p>프로퍼티의 설명자를 구하기 위해서는 <code class=\"hljs-text\">Object.getOwnPropertyDescriptor(obj, propName)</code> 메소드를 사용해야 한다.\n이 때, 2번째 인자인 <code class=\"hljs-text\">propName</code>은 객체인 <code class=\"hljs-text\">obj</code>의 속성이며 프로토타입 체인에 속하지 않아야 한다.<br />\n이 메소드는 프로퍼티의 현재 값, 권한 등을 가지는 객체를 돌려주며, 사용 예는 다음과 같다.\n(이외에도 값을 반환하거나 변경하는 함수인 <code class=\"hljs-text\">get</code>과 <code class=\"hljs-text\">set</code> 인자가 있지만, 선택사항이다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  num<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n  str<span class=\"token punctuation\">:</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { value: 42, writable: true, enumerable: true, configurable: true }</span></code></pre>\n      </div>\n<p>객체에 새 속성을 부여하기 위해서 <code class=\"hljs-text\">obj.propName = value;</code>와 같은 방식을 사용하기도 하지만, <code class=\"hljs-text\">Object.defineProperty</code> 메소드를 사용하기도 한다.\n이 때, 메소드의 결과값은 1번째 인자의 객체이다.</p>\n<p><strong>writable</strong>\n<code class=\"hljs-text\">writable</code>은 객체의 프로퍼티가 쓰기 가능한 지의 여부이며, <code class=\"hljs-text\">false</code>일 경우 값 쓰기가 안 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  num<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> writable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// you can also pass the `value` in 3rd parameter</span>\n\nobj<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { num: 100 }</span></code></pre>\n      </div>\n<p><strong>enumerable</strong>\n<code class=\"hljs-text\">enumerable</code>은 객체의 프로퍼티가 열거 가능한 지의 여부이며, <code class=\"hljs-text\">false</code>일 경우 <code class=\"hljs-text\">Object.keys</code>에서 해당 프로퍼티를 볼 수 없다.<br />\n(<code class=\"hljs-text\">Object.values</code>, <code class=\"hljs-text\">Object.entries</code>도 마찬가지이다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  num<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []</span></code></pre>\n      </div>\n<p><strong>configurable</strong>\n<code class=\"hljs-text\">configurable</code>은 객체의 프로퍼티가 <code class=\"hljs-text\">defineProperty</code>를 통해 설정 될 수 있는 지의 여부이며, <code class=\"hljs-text\">false</code>일 경우 <code class=\"hljs-text\">Object.defineProperty</code>로 해당 프로퍼티를 수정할 수 없다.<br />\n이는 주로 사용자가 객체의 행동을 수정하지 못 하게 할 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  num<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> writable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> writable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught TypeError</span></code></pre>\n      </div>\n<p><strong>getter/setter</strong>\n<code class=\"hljs-text\">get</code>(<code class=\"hljs-text\">getter</code>)나 <code class=\"hljs-text\">set</code>(<code class=\"hljs-text\">setter</code>)는 주로 동적으로 계산된 값을 반환하는 프로퍼티에 접근해야하는 경우 또는 명시적인 메소드 호출을 사용하지 않고도 내부 변수의 상태에 접근하는 경우 등에 사용한다.</p>\n<p>이 때, 다음과 같은 주의사항이 있다.</p>\n<ul>\n<li>식별자는 숫자 혹은 문자열이다.</li>\n<li><code class=\"hljs-text\">getter</code>는 오직 0개 혹은 1 개의 인자를 가질 수 있으며, <code class=\"hljs-text\">setter</code>는 오직 1개의 인자를 가질 수 있다.</li>\n<li>중복되는 프로퍼티는 금지된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">const</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  model<span class=\"token punctuation\">:</span> <span class=\"token string\">'x5'</span><span class=\"token punctuation\">,</span>\n  maker<span class=\"token punctuation\">:</span> <span class=\"token string\">'bmw'</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token punctuation\">:</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/*\n  get detail() {\n    return `${this.color} ${this.model}`\n  },\n  set detail(desc = '') {\n    const [color, model] = desc.split(' ');\n    this.color = color;\n    this.model = model;\n  }\n  */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ncar<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">,</span> <span class=\"token string\">'detail'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>color<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> desc<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncar<span class=\"token punctuation\">.</span>detail<span class=\"token punctuation\">;</span> <span class=\"token comment\">// white x5</span>\ncar<span class=\"token punctuation\">;</span> <span class=\"token comment\">// { model: 'x5', maker: 'bmw', color: 'white' }</span>\n\ncar<span class=\"token punctuation\">.</span>detail <span class=\"token operator\">=</span> <span class=\"token string\">'red x3'</span><span class=\"token punctuation\">;</span>\ncar<span class=\"token punctuation\">.</span>detail<span class=\"token punctuation\">;</span> <span class=\"token comment\">// red x3</span>\ncar<span class=\"token punctuation\">;</span> <span class=\"token comment\">// { model: 'x3', maker: 'bmw', color: 'red' }</span></code></pre>\n      </div>\n<h2>Decorator</h2>\n<p><code class=\"hljs-text\">장식자</code>는 클래스 프로퍼티나 메소드 혹은 클래스 자체를 수정하는 데 사용되는 자바스크립트 함수이다. (순수 함수로 작성되는 것이 좋다.)<br />\n문법은 <code class=\"hljs-text\">@decoratorFunction</code>과 같으며 클래스의 프로퍼티, 메소드, 클래스 자신의 바로 윗줄에 추가해준다.</p>\n<p>또한, 장식자는 장식자가 적용된 메소드가 호출되거나, 클래스 인스턴스가 만들어지는 등 런타임에 실행된다.</p>\n<p>위 함수는 추후 메소드에 @chaining 형식으로 사용될 함수입니다. @과 함께 함수가 호출되는 경우 받게 되는 파라미터는 다음과 같습니다.</p>\n<p>target : 속성을 정의하고자 하는 객체\nname : 속성의 이름\ndescriptor : 새로 정의하고자 하는 속성에 대한 설명</p>\n<h3>Environments</h3>\n<p>트랜스파일러인 <a href=\"http://babeljs.io/\">babel</a>과 플러그인 등을 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"hljs-text\"><code class=\"hljs-text\"># install packages\n$ npm i -D @babel/cli @babel/node @babel/core @babel/plugin-proposal-decorators\n\n# create .babelrc\n$ echo &quot;{ \\&quot;plugins\\&quot;: [ [\\&quot;@babel/plugin-proposal-decorators\\&quot;, { \\&quot;legacy\\&quot;: true }] ] }&quot; &gt; .babelrc\n\n# run babel-node\n$ ./node_modules/.bin/babel-node ./FILE</code></pre>\n      </div>\n<h3>Class method decorator</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readOnly</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// with new Person, target will be an instance of Person</span>\n  descriptor<span class=\"token punctuation\">.</span>writable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> descriptor<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this function MUST return descriptor</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  @readOnly\n  <span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// create instance</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Doe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Person.prototype.getFullName = () => 'CRACKED';</span></code></pre>\n      </div>\n<p><strong>참고 : 인자를 포함한 장식자</strong>\n<a href=\"/closure/\">클로저</a>를 이용해 인자를 가지는 장식자를 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logger</span> <span class=\"token operator\">=</span> msg <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> descriptor<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// do NOT use arrow function in here. to bind `this`</span>\n    descriptor<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[LOG]'</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> descriptor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readOnly</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  descriptor<span class=\"token punctuation\">.</span>writable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> descriptor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  @<span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'call getFullName method on Person'</span><span class=\"token punctuation\">)</span>\n  @readOnly\n  <span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// create instance</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Doe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h3>Class instance field decorator</h3>\n<p>클래스 인스턴스의 필드 장식자를 만드는 것은 까다롭다. 클래스 인스턴스 필드는 클래스의 일부나 프로토타입이 아니기 때문이다.<br />\n(인스턴스 필드 장식자는 실험적이기 때문에 stage 4로 넘어갈 때까지 구문이 변경될 가능성이 있다. 참고 : <a href=\"https://tc39.github.io/proposal-decorators/\">Decorators proposal</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toPascalCase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">initializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  descriptor<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">initializer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/(\\w)(\\w*)/g</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>$<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>$<span class=\"token number\">1.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> $<span class=\"token number\">2.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> descriptor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  @toPascalCase\n  firstName <span class=\"token operator\">=</span> <span class=\"token string\">'jane'</span><span class=\"token punctuation\">;</span>\n\n  @toPascalCase\n  lastName <span class=\"token operator\">=</span> <span class=\"token string\">'doe'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Person { firstName: \"Jane\", lastName: \"Doe\" }</span></code></pre>\n      </div>\n<h3>Class decorator</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"hljs-js\"><code class=\"hljs-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withDob</span> <span class=\"token operator\">=</span> PersonRef <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> PersonRef <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dob <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">setDob</span><span class=\"token punctuation\">(</span>dob<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dob <span class=\"token operator\">=</span> dob<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n@withDob\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jaewon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Kim'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">setDob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1990-02-05'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://codeburst.io/javascript-object-property-attributes-ac012be317e2\">JavaScript — Property Descriptor</a></li>\n<li><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841\">Exploring EcmaScript Decorators</a></li>\n<li><a href=\"https://github.com/wycats/javascript-decorators\">Github repository : wycats/javascript-decorators</a></li>\n</ul>","frontmatter":{"title":"JavaScript Decorator 이해하기","path":"/what-is-decorator/","images":["images/js.jpg"],"category":"JavaScript","tags":["javascript","decorator","descriptor"],"date":"2018-08-06T19:48:56.000Z","components":null,"tweets":null,"summary":""}}},"pageContext":{}}