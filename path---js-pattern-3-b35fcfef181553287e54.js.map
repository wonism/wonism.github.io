{"version":3,"sources":["webpack:///path---js-pattern-3-b35fcfef181553287e54.js","webpack:///./.cache/json/js-pattern-3.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/js-pattern-3.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","path","tags","category","date","summary","components","tweets","isNotPost","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,sEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,+BAAAC,OAAA,WAA0DC,gBAAmBC,GAAA,+HAAAC,KAAA,ygJAAgvIC,aAAumBL,MAAA,gBAAAM,KAAA,iBAAAC,MAAA,qEAAAC,SAAA,aAAAC,KAAA,mBAAAC,QAAA,wIAAAC,WAAA,KAAAC,OAAA,KAAAC,UAAA,QAAoXC,aAAgBR,KAAA","file":"path---js-pattern-3-b35fcfef181553287e54.js","sourcesContent":["webpackJsonp([251375080865958],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/js-pattern-3.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Wonism ∙ Front-end Developer\",\"author\":\"wonism\"}},\"markdownRemark\":{\"id\":\"/Users/wonism/project/wonism.github.io-gatsby/src/pages/2017-10-25-js-patterns-3/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Prototype</h2>\\n<p><code>프로토타입</code>은 프로토타입 인스턴스를 사용하여 만들 객체의 종류를 지정하고, 이 프로토타입을 복사함으로써 새 객체를 만든다.</p>\\n<p><code>프로토타입 패턴</code>은 데이터베이스의 기본값과 일치하는 값을 가지는 객체 초기화에서 유용하게 사용된다.</p>\\n<h2>구현</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">CarPrototype</span><span class=\\\"token punctuation\\\">(</span>proto<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>proto <span class=\\\"token operator\\\">=</span> proto<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>clone <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">clone</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> car <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Car</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    car<span class=\\\"token punctuation\\\">.</span>colors <span class=\\\"token operator\\\">=</span> proto<span class=\\\"token punctuation\\\">.</span>colors<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> car<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Car</span><span class=\\\"token punctuation\\\">(</span>colors<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>colors <span class=\\\"token operator\\\">=</span> colors<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>go <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">go</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'%s car is driven by human.'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>colors<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> carProto <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Car</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> carPrototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">CarPrototype</span><span class=\\\"token punctuation\\\">(</span>carProto<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> car <span class=\\\"token operator\\\">=</span> carPrototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">clone</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ncar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">go</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// red car is driven by human.</span>\\n</code></pre>\\n      </div>\\n<p><code>CarPrototype</code> 객체는 주어진 프로토타입 객체가 주어진 객체를 복제한다.<br />\\n또, <code>clone</code> 메소드를 호출하면 프로토타입으로 초기화된 속성 값들을 가지는 <code>Car</code> 객체를 생성한다.</p>\\n<h2>정리</h2>\\n<p><code>프로토타입 패턴</code>은 새 객체를 생성하지만, 초기화되지 않은 객체를 생성하는 대신 <code>원형(Prototype)</code>에서 복사한 값으로 초기화되는 객체를 반환한다.<br />\\n이를 <code>Properties 패턴</code>이라고 하기도 한다.</p>\\n<p>구현을 통해 사용방법을 알아봤지만, 자바스크립트에 내장된 <code>prototype</code>기능을 사용하면 훨씬 효과적으로 이 작업을 수행할 수 있다.</p>\\n<p>다음엔 <code>반복자 패턴</code>에 대해 알아보겠다.</p>\",\"frontmatter\":{\"title\":\"자바스크립트 패턴 - 3\",\"path\":\"/js-pattern-3/\",\"tags\":[\"javascript\",\"pattern\",\"design pattern\",\"디자인패턴\",\"prototype\",\"프로토타입\"],\"category\":\"JavaScript\",\"date\":\"October 25, 2017\",\"summary\":\"여기서 말하는 프로토타입은 함수를 확장할 수 있는 Function.prototype이 아니다.  프로토타입 패턴에서의 프로토타입은 프로토타입 인스턴스를 사용하여 만들 객체의 종류를 지정하고, 이 프로토타입을 복사함으로써 새 객체를 만든다.\",\"components\":null,\"tweets\":null,\"isNotPost\":null}}},\"pathContext\":{\"path\":\"/js-pattern-3/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---js-pattern-3-b35fcfef181553287e54.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Wonism ∙ Front-end Developer\",\"author\":\"wonism\"}},\"markdownRemark\":{\"id\":\"/Users/wonism/project/wonism.github.io-gatsby/src/pages/2017-10-25-js-patterns-3/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Prototype</h2>\\n<p><code>프로토타입</code>은 프로토타입 인스턴스를 사용하여 만들 객체의 종류를 지정하고, 이 프로토타입을 복사함으로써 새 객체를 만든다.</p>\\n<p><code>프로토타입 패턴</code>은 데이터베이스의 기본값과 일치하는 값을 가지는 객체 초기화에서 유용하게 사용된다.</p>\\n<h2>구현</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">CarPrototype</span><span class=\\\"token punctuation\\\">(</span>proto<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>proto <span class=\\\"token operator\\\">=</span> proto<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>clone <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">clone</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> car <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Car</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    car<span class=\\\"token punctuation\\\">.</span>colors <span class=\\\"token operator\\\">=</span> proto<span class=\\\"token punctuation\\\">.</span>colors<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> car<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Car</span><span class=\\\"token punctuation\\\">(</span>colors<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>colors <span class=\\\"token operator\\\">=</span> colors<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>go <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">go</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'%s car is driven by human.'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>colors<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> carProto <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Car</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> carPrototype <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">CarPrototype</span><span class=\\\"token punctuation\\\">(</span>carProto<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> car <span class=\\\"token operator\\\">=</span> carPrototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">clone</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ncar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">go</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// red car is driven by human.</span>\\n</code></pre>\\n      </div>\\n<p><code>CarPrototype</code> 객체는 주어진 프로토타입 객체가 주어진 객체를 복제한다.<br />\\n또, <code>clone</code> 메소드를 호출하면 프로토타입으로 초기화된 속성 값들을 가지는 <code>Car</code> 객체를 생성한다.</p>\\n<h2>정리</h2>\\n<p><code>프로토타입 패턴</code>은 새 객체를 생성하지만, 초기화되지 않은 객체를 생성하는 대신 <code>원형(Prototype)</code>에서 복사한 값으로 초기화되는 객체를 반환한다.<br />\\n이를 <code>Properties 패턴</code>이라고 하기도 한다.</p>\\n<p>구현을 통해 사용방법을 알아봤지만, 자바스크립트에 내장된 <code>prototype</code>기능을 사용하면 훨씬 효과적으로 이 작업을 수행할 수 있다.</p>\\n<p>다음엔 <code>반복자 패턴</code>에 대해 알아보겠다.</p>\",\"frontmatter\":{\"title\":\"자바스크립트 패턴 - 3\",\"path\":\"/js-pattern-3/\",\"tags\":[\"javascript\",\"pattern\",\"design pattern\",\"디자인패턴\",\"prototype\",\"프로토타입\"],\"category\":\"JavaScript\",\"date\":\"October 25, 2017\",\"summary\":\"여기서 말하는 프로토타입은 함수를 확장할 수 있는 Function.prototype이 아니다.  프로토타입 패턴에서의 프로토타입은 프로토타입 인스턴스를 사용하여 만들 객체의 종류를 지정하고, 이 프로토타입을 복사함으로써 새 객체를 만든다.\",\"components\":null,\"tweets\":null,\"isNotPost\":null}}},\"pathContext\":{\"path\":\"/js-pattern-3/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/js-pattern-3.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/js-pattern-3.json\n// module chunks = 251375080865958"],"sourceRoot":""}