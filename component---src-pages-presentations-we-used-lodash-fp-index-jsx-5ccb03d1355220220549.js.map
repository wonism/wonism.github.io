{"version":3,"sources":["webpack:///./src/pages/presentations/we-used-lodash-fp/index.jsx"],"names":["__webpack_exports__","default"],"mappings":"kGAAAA,EAAAC,QAAA,WAAe,OAAM","file":"component---src-pages-presentations-we-used-lodash-fp-index-jsx-5ccb03d1355220220549.js","sourcesContent":["export default () => null;\n\n/** @jsx createElement */\n/*\nimport { createElement, Fragment, Component } from 'react';\nimport styled from 'styled-components';\nimport Helmet from 'react-helmet';\nimport {\n  Appear,\n  BlockQuote,\n  Cite,\n  CodePane,\n  Code,\n  Deck,\n  Fill,\n  Fit,\n  Heading,\n  Image,\n  Layout,\n  ListItem,\n  List,\n  Quote,\n  Slide,\n  Text,\n} from 'spectacle';\nimport createTheme from 'spectacle/lib/themes/default';\n\nconst theme = createTheme({ primary: '#3B9CFF' });\n\nconst UL = styled(List)`\n  list-style: disc;\n\n  li {\n    margin: 1em 0;\n  }\n`;\n\nconst Strong = styled.strong`\n  color: #fff;\n  font-size: 1.6em;\n  font-weight: 700;\n`;\n\nexport default class Presentation extends Component {\n  state = {\n    steps: 0,\n  };\n\n  shouldComponentUpdate(_, nextState) {\n    return this.state.steps !== nextState.steps;\n  }\n\n  updateSteps = (steps) => {\n    if (this.state.steps !== steps) {\n      this.setState({ steps });\n    }\n  };\n\n  render() {\n    const title = 'Lodash 걷어내기';\n\n    return (\n      <Fragment>\n        <Helmet>\n          <title>WONISM | {title}</title>\n          <meta name=\"og:title\" content={`WONISM | ${title}`} />\n        </Helmet>\n        <Deck theme={theme}>\n          <Slide transition={['zoom']}>\n            <Heading size={1} textColor=\"#000\">\n              {title}\n            </Heading>\n            <Heading margin=\".5em 0 1.5em\" size={5} textColor=\"#fff\">\n              Lodash로 인해 얻은 것 그리고 잃은 것\n            </Heading>\n            <Text>\n              Github : wonism\n            </Text>\n          </Slide>\n          <Slide\n            transition={[\n              'fade',\n              (transitioning, forward) => {\n                const angle = forward ? -180 : 180;\n\n                return {\n                  transform: `\n                    translate3d(0%, ${transitioning ? 100 : 0}%, 0)\n                    rotate(${transitioning ? angle : 0}deg)\n                  `,\n                  backgroundColor: transitioning ? '#26afff' : '#000'\n                };\n              }\n            ]}\n          >\n            <Heading>\n              Lodash\n            </Heading>\n            <Heading size={3}>\n              어디에 좋은데요?\n            </Heading>\n          </Slide>\n          <Slide transition={['zoom', 'fade']}>\n            <Appear>\n              <Heading size={4}>\n                바로...\n              </Heading>\n            </Appear>\n            <Appear>\n              <Heading>\n                함수형 프로그래밍!\n              </Heading>\n            </Appear>\n          </Slide>\n          <Slide transition={['zoom', 'fade']}>\n            <Heading size={2}>\n              그건 또 뭐죠?\n            </Heading>\n          </Slide>\n          <Slide>\n            <Appear>\n              <Text margin=\"0 0 2em\" textSize=\"20px\" textAlign=\"left\">\n                함수형 프로그래밍은 자료 처리를 수학적 함수의 계산으로 취급하고 상태와 가변 데이터를 멀리하는 프로그래밍 패러다임의 하나이다.\n                명령형 프로그래밍에서는 상태를 바꾸는 것을 강조하는 것과는 달리, 함수형 프로그래밍은 함수의 응용을 강조한다.\n                함수형 프로그래밍은 1930년대에 계산가능성, 결정문제, 함수정의, 함수응용과 재귀를 연구하기 위해 개발된 형식체계인 람다 대수에 근간을 두고 있다.\n                다수의 함수형 프로그래밍 언어들은 람다 연산을 발전시킨 것으로 볼 수 있다.\n                <br />\n                수학적 함수와 명령형 프로그래밍에서 사용되는 함수는 차이가 있는데, 명령형의 함수는 프로그램의 상태의 값을 바꿀 수 있는 부작용이 생길 수 있다.\n                이 때문에 명령형 함수는 참조 투명성이 없고, 같은 코드라도 실행되는 프로그램의 상태에 따라 다른 결과값을 낼 수 있다.\n                반대로 함수형 코드에서는 함수의 출력값은 그 함수에 입력된 인수에만 의존하므로 인수 x에 같은 값을 넣고 함수 f를 호출하면 항상 f(x)라는 결과가 나온다.\n                부작용을 제거하면 프로그램의 동작을 이해하고 예측하기가 훨씬 쉽게 된다.\n                이것이 함수형 프로그래밍으로 개발하려는 핵심 동기중 하나이다.\n                <br />\n                Hope같은 최초의 순수 함수형 언어는 상업적 소프트웨어 개발보다는 학계에서 많은 관심을 받았다.\n                하지만 커먼 리스프, 스킴, ISLISP, 클로져, Racket, 얼랭, OCaml, 하스켈, 스칼라, F# 같은 주요 함수형 언어들은 광범위한 기관에서 산업적이고 상업적인 응용 프로그램 개발에 사용되고 있다.\n                함수형 언어는 R (통계), 매스매티카 (기호와 수론 수학), J, K 와 Kx 시스템 기반 (재정 시스템)에서 나온 Q, XQuery/XSLT (XML), Opal 같은 특정 분야 프로그래밍 언어(Domain Specific Language)에서도 사용되고 있다.\n                많이 쓰이는 특정 분야 선언 언어인 SQL과 lex/Yacc는 특히 가변값을 회피하는데 있어 함수형 언어의 요소들을 사용한다.\n                <br />\n                함수형 스타일의 프로그래밍은 함수형 언어로 별도로 설계되지 않은 언어에서도 가능하다.\n                예를 들어, 명령형인 펄 프로그래밍 언어는 함수형 프로그래밍 개념을 적용하는 법을 설명하는 책에서 주제로 다루기도 했다.\n                C# 3.0은 함수형 스타일의 쓸 수 있는 구문을 추가했다.\n                <br />\n                <br />\n                - https://ko.wikipedia.org/wiki/함수형_프로그래밍\n              </Text>\n            </Appear>\n            <Appear>\n              <Heading size={3}>\n                됐고...\n              </Heading>\n            </Appear>\n          </Slide>\n          <Slide transition={['slide']}>\n            <UL type=\"A\">\n              <ListItem>\n                순수한 함수 : 부작용(Side-effect)로부터 자유로움\n              </ListItem>\n              <ListItem>\n                고차 함수 : 함수의 재사용 및 조합에 용이\n              </ListItem>\n              <ListItem>\n                커링 : 인자 하나씩 사용하여 함수 실행\n              </ListItem>\n              <ListItem notes=\"재귀는 단, 반복문에 비해 속도가 느리다. 스택을 사용하기 때문에 반복이 많아질 경우, 스택오버플로우가 발생될 수도 있다.\">\n                재귀 : for (i = 0; i &gt; 10; i++) → i != 불변\n              </ListItem>\n            </UL>\n          </Slide>\n          <Slide>\n            <Appear>\n              <Text>\n                오토 커링, HOC 등 많은 이유가 있지만\n              </Text>\n            </Appear>\n            <Appear>\n              <Text>\n                Lodash를 사용했던 가장 큰 이유는...\n              </Text>\n            </Appear>\n            <Appear>\n              <Heading margin=\".5em 0 0\">\n                순수 함수\n              </Heading>\n            </Appear>\n          </Slide>\n          <Slide transition={['spin']}>\n            <Text>\n              상태값을 관리하는 Redux의 리듀서는\n            </Text>\n            <Text margin=\".7em 0 0\">\n              무조건 <Strong>순수함수</Strong>로 작성되어야 한다!\n            </Text>\n          </Slide>\n        </Deck>\n      </Fragment>\n    );\n  }\n}\n*/\n"],"sourceRoot":""}