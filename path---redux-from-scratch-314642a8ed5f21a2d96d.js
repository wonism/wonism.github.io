(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{441:function(n){n.exports={data:{markdownRemark:{id:"/Users/wonism/project/wonism.github.io/src/pages/2017-10-05-redux-tutorial/index.md absPath of file >>> MarkdownRemark",html:'<p><code class="hljs-text">Redux</code>는 상태를 관리해주는 라이브러리로 <code class="hljs-text">React JS</code>, <code class="hljs-text">Vue JS</code> 등과 함께 사용되며, 큰 애플리케이션의 상태를 보다 쉽게 할 수 있도록 도와준다.</p>\n<h2>Flux</h2>\n<p><code class="hljs-text">Redux</code>에 대해 설명하기 앞서, <code class="hljs-text">Flux</code>란 아키텍쳐에 대해 설명하겠다.<br />\n<code class="hljs-text">Flux</code>는 단방향 데이터 흐름을 이용함으로써 리액트의 컴퍼넌트들을 보완한다.<br />\n사용자가 뷰와 상호작용할 때, 뷰는 중앙 디스패쳐를 통해 다양한 <code class="hljs-text">store</code>에 <code class="hljs-text">액션</code>을 전파한다.<br />\n(<code class="hljs-text">store</code>는 애플리케이션의 데이터와 로직을 가지고 있으며, 데이터와 로직은 상태에 따라 뷰를 업데이트하는 역할을 수행한다.)<br />\n<code class="hljs-text">Flux</code>에는 많은 <code class="hljs-text">store</code>가 있으며, 각 <code class="hljs-text">store</code>는 상태의 각각 다른 작은 부분이나 애플리케이션의 데이터를 사용한다.</p>\n<h3>Flux 데이터 흐름</h3>\n<ul>\n<li>사용자가 뷰와 상호작용을 하면, 뷰는 <code class="hljs-text">액션</code>을 트리거한다.</li>\n<li><code class="hljs-text">액션</code>이 해당 함수를 전달하고, 해당 함수는 <code class="hljs-text">store</code>를 변경한다.</li>\n<li><code class="hljs-text">store</code>가 데이터를 갱신하면, 뷰는 이에 따라 갱신된다.</li>\n</ul>\n<p>애플리케이션이 커지면, 여러 <code class="hljs-text">store</code>가 데이터를 관리하게 된다.</p>\n<h2>Redux</h2>\n<p><code class="hljs-text">Redux</code>는 예측가능한 상태 컨테이너로 <code class="hljs-text">Flux</code>의 구현체이다.<br />\n하지만 완전한 <code class="hljs-text">Flux</code> 구현체라고 보기는 힘들다. <code class="hljs-text">Redux</code>는 애플리케이션의 상태를 위해 단 한 개의 스토어를 사용하기 때문이다.\n대신, <code class="hljs-text">Redux</code>의 <code class="hljs-text">store</code>는 다양한 상태 객체로 나뉘어진다.</p>\n<h3>Redux의 세 가지 원칙</h3>\n<ol>\n<li>진리의 단일 소스</li>\n<li>상태는 읽기 전용</li>\n<li>순수 함수로써 변경이 된다.</li>\n</ol>\n<h3>액션</h3>\n<p><code class="hljs-text">Redux</code>의 상태를 변경하기 위해서는 <code class="hljs-text">액션</code>을 내보내야한다. <code class="hljs-text">액션</code>은 자바스크립트 객체이며, 어떤 일이 발생하는지 설명하는 <code class="hljs-text">type</code> 속성을 반드시 가진다. 또한, 상태 변경을 위한 값인 <code class="hljs-text">payload</code>를 가진다.<br />\n이 때, <code class="hljs-text">payload</code>는 없을 수도 있으며, <code class="hljs-text">2</code>개 이상일 수도 있다. 또한, 속성 이름은 개발자가 임의로 지정할 수 있다.</p>\n<h3>액션 생성자</h3>\n<p><code class="hljs-text">액션 생성자</code>는 <code class="hljs-text">액션</code>을 생성하는 함수이다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD_TODO<span class="token punctuation">,</span> REMOVE_TODO <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./actionTypes\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addTodo</span> <span class="token operator">=</span> text <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> ADD_TODO<span class="token punctuation">,</span> text <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">removeTodo</span> <span class="token operator">=</span> index <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> typd<span class="token punctuation">:</span> REMOVE_TODO<span class="token punctuation">,</span> index <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h3>리듀서</h3>\n<p><code class="hljs-text">액션</code>은 단지 어떤 일이 발생할지만을 설명한다. 애플리케이션의 상태가 어떻게 변할지 설명하는 일은 <code class="hljs-text">리듀서</code>의 일이다.<br />\n<code class="hljs-text">리듀서</code>는 이전의 상태를 받아 새로운 상태를 반환한다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token punctuation">(</span>previousState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> newState\n</code></pre>\n      </div>\n<p>다음은 <code class="hljs-text">리듀서</code> 내부에서 절대 해서는 안 되는 일들이다.</p>\n<ul>\n<li><code class="hljs-text">리듀서</code>의 인자를 변경하는 일</li>\n<li>\n<p>부작용을 일으킬 수 있는 일</p>\n<ul>\n<li>DB 호출, API 호출, 라우팅 전환</li>\n<li><code class="hljs-text">Date.now()</code>, <code class="hljs-text">Math.random()</code>과 같은 순수하지 않은 함수를 호출하는 일</li>\n</ul>\n</li>\n</ul>\n<h3>스토어</h3>\n<p><code class="hljs-text">store</code>는 객체로써 그들을 하나로 모으는 일을 하며, 다음과 같은 일을 한다.</p>\n<ul>\n<li>애플리케이션의 상태를 가진다.</li>\n<li><code class="hljs-text">getState()</code>를 통해 상태에 접근할 수 있다.</li>\n<li><code class="hljs-text">dispatch(action)</code>를 통해 상태를 업데이트할 수 있다.</li>\n<li><code class="hljs-text">subscribe(listener)</code>를 통해 리스너를 등록할 수 있다.</li>\n<li><code class="hljs-text">subscribe(listener)</code>에 의해 반환된 함수를 호출함으로써 리스너의 등록 취소를 할 수 있다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> todoReducer <span class="token keyword">from</span> <span class="token string">\'./todo/reducers\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>todoReducer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2>Redux 구현해보기</h2>\n<p>다음과 같은 <code class="hljs-text">Todo</code> 애플리케이션을 구현하고자 한다.</p>\n<div id="redux-tutorial"></div>\n<p>파일 구조도는 다음과 같다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-text"><code class="hljs-text">src\n├── index.jsx\n└── todo\n    ├── Todo.jsx\n    ├── TodoActionTypes.js\n    ├── TodoActions.js\n    ├── TodoAdder.jsx\n    ├── TodoContainer.jsx\n    ├── TodoItem.jsx\n    └── TodoReducers.js</code></pre>\n      </div>\n<h3>액션</h3>\n<p>먼저 액션 타입(동작 유형)들을 정의한다.<br />\n아래에 정의된 동작을 발생하면, <code class="hljs-text">리듀서</code>가 상태를 변경하게 된다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token comment">// src/todo/TodoActionTypes.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> ADD_TODO <span class="token operator">=</span> <span class="token string">\'ADD_TODO\'</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> REMOVE_TODO <span class="token operator">=</span> <span class="token string">\'REMOVE_TODO\'</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> TOGGLE_TODO <span class="token operator">=</span> <span class="token string">\'TOGGLE_TODO\'</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> FAILED_TO_ADD_TODO <span class="token operator">=</span> <span class="token string">\'FAILED_TO_ADD_TODO\'</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><code class="hljs-text">액션</code>은 액션을 설명하는 객체를 전달한다.<br />\n(액션 타입을 상수로 만듦으로써 오타를 방지할 수 있다.\n<code class="hljs-text">{ type: &#39;ADDD_TODO&#39;, todo }</code>와 같이 액션 타입을 문자열로 직접 전달하게 되면, 예상하지 못한 버그가 발생할 것이다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token comment">// src/todo/TodoActions.js</span>\n<span class="token keyword">import</span> fp <span class="token keyword">from</span> <span class="token string">\'lodash/fp\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  ADD_TODO<span class="token punctuation">,</span>\n  REMOVE_TODO<span class="token punctuation">,</span>\n  TOGGLE_TODO<span class="token punctuation">,</span>\n  FAILED_TO_ADD_TODO<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./TodoActionTypes\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addTodo</span> <span class="token operator">=</span> todo <span class="token operator">=></span>\n  <span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> todos <span class="token punctuation">}</span> <span class="token operator">=</span> state<span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todo <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        type<span class="token punctuation">:</span> ADD_TODO<span class="token punctuation">,</span>\n        todo<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> FAILED_TO_ADD_TODO<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">removeTodo</span> <span class="token operator">=</span> index <span class="token operator">=></span>\n  dispatch <span class="token operator">=></span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> REMOVE_TODO<span class="token punctuation">,</span>\n      index<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">toggleTodo</span> <span class="token operator">=</span> index <span class="token operator">=></span>\n  dispatch <span class="token operator">=></span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> TOGGLE_TODO<span class="token punctuation">,</span>\n      index<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h3>리듀서</h3>\n<p>위에서 언급했듯이, <code class="hljs-text">리듀서</code>에서는 부작용을 일으키면 안 된다. 전달받은 이전의 상태값을 통해 새로운 상태값을 만들어 반환해야 한다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token comment">// src/todo/TodoReducers.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  ADD_TODO<span class="token punctuation">,</span>\n  REMOVE_TODO<span class="token punctuation">,</span>\n  TOGGLE_TODO<span class="token punctuation">,</span>\n  FAILED_TO_ADD_TODO<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./TodoActionTypes\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">todoReducers</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> <span class="token operator">...</span>action <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> ADD_TODO<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> todo <span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> <span class="token punctuation">[</span>\n        <span class="token operator">...</span>state<span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> todo<span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> REMOVE_TODO<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> index <span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> length <span class="token operator">=</span> state<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> <span class="token punctuation">[</span>\n        <span class="token operator">...</span>state<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token operator">...</span>state<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> TOGGLE_TODO<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> index <span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> length <span class="token operator">=</span> state<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> selectedTodo <span class="token operator">=</span> state<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> todo <span class="token punctuation">}</span> <span class="token operator">=</span> selectedTodo<span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> <span class="token punctuation">[</span>\n        <span class="token operator">...</span>state<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          todo<span class="token punctuation">,</span>\n          done<span class="token punctuation">:</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>done<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token operator">...</span>state<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> FAILED_TO_ADD_TODO<span class="token punctuation">:</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'중복된 아이템입니다.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eslint-disable-line</span>\n      <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> todoReducers<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h3>메인 파일과 컴퍼넌트들</h3>\n<p><code class="hljs-text">redux</code>의 <code class="hljs-text">combineReducer</code>는 이름 그대로 모든 <code class="hljs-text">리듀서</code>를 결합하여 하나의 <code class="hljs-text">스토어</code>로 결합한다.<br />\n<code class="hljs-text">react-redux</code>의 <code class="hljs-text">Provider</code>에 <code class="hljs-text">store</code>를 설정하면, 그 하위 컴퍼넌트들에게 따로 전달해주지 않아도 <code class="hljs-text">connect</code>될 때, <code class="hljs-text">store</code>에 접근할 수 있다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token comment">// src/index.jsx</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> combineReducers<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">\'redux-thunk\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> TodoContainer <span class="token keyword">from</span> <span class="token string">\'./todo/TodoContainer\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> TodoReducers <span class="token keyword">from</span> <span class="token string">\'./todo/TodoReducers\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> reducers <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todos<span class="token punctuation">:</span> TodoReducers <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducers<span class="token punctuation">,</span> middleware<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>TodoContainer <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">,</span>\n  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h3>Container 컴퍼넌트 (Smart 컴퍼넌트)</h3>\n<p><code class="hljs-text">컨테이너 컴퍼넌트</code>는 애플리케이션의 상태와 직접 상호작용하는 컴퍼넌트이다.<br />\n<code class="hljs-text">store</code>에 접근할 수 있으며, <code class="hljs-text">action</code>을 전달하거나 현재 상태를 가져올 수 있다.</p>\n<p><code class="hljs-text">connect</code>는 리액트의 컴퍼넌트와 리덕스의 <code class="hljs-text">store</code>를 연결해준다. 전달받는 인자는 아래와 같으며, 전달하지 않아도 무방하다.</p>\n<ul>\n<li><code class="hljs-text">mapStateToProps</code> : <code class="hljs-text">store</code>의 상태를 <code class="hljs-text">props</code>로 전달한다.</li>\n<li><code class="hljs-text">mapDispatchToProps</code> : 컴퍼넌트의 <code class="hljs-text">props</code>로 전달된 함수를 실행할 때, 특정한 <code class="hljs-text">action</code>을 전달하도록 한다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token comment">// src/todo/TodoContainer.jsx</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> bindActionCreators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  addTodo<span class="token punctuation">,</span>\n  removeTodo<span class="token punctuation">,</span>\n  toggleTodo<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./TodoActions\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Todo <span class="token keyword">from</span> <span class="token string">\'./Todo\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> state <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  todos<span class="token punctuation">:</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> dispatch <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  addTodo<span class="token punctuation">:</span> <span class="token function">bindActionCreators</span><span class="token punctuation">(</span>addTodo<span class="token punctuation">,</span> dispatch<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  removeTodo<span class="token punctuation">:</span> <span class="token function">bindActionCreators</span><span class="token punctuation">(</span>removeTodo<span class="token punctuation">,</span> dispatch<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  toggleTodo<span class="token punctuation">:</span> <span class="token function">bindActionCreators</span><span class="token punctuation">(</span>toggleTodo<span class="token punctuation">,</span> dispatch<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Todo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h3>Presentational 컴퍼넌트 (Dumb 컴퍼넌트)</h3>\n<p><code class="hljs-text">Presentational 컴퍼넌트</code>는 하위 컴퍼넌트를 가지지만, <code class="hljs-text">store</code>와 상호작용하지는 않는다.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token comment">// src/todo/Todo.jsx</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">\'prop-types\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> fp <span class="token keyword">from</span> <span class="token string">\'lodash/fp\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> TodoItem <span class="token keyword">from</span> <span class="token string">\'./TodoItem\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> TodoAdder <span class="token keyword">from</span> <span class="token string">\'./TodoAdder\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Todo</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    todos<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">arrayOf</span><span class="token punctuation">(</span>PropTypes<span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todo<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span> done<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>bool <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n    addTodo<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n    removeTodo<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n    toggleTodo<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> todos<span class="token punctuation">,</span> addTodo<span class="token punctuation">,</span> removeTodo<span class="token punctuation">,</span> toggleTodo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>TodoAdder addTodo<span class="token operator">=</span><span class="token punctuation">{</span>addTodo<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>ul<span class="token operator">></span>\n          <span class="token punctuation">{</span>fp<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todo<span class="token punctuation">,</span> done <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> index <span class="token operator">=</span> fp<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todo <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">return</span> <span class="token punctuation">(</span>\n              <span class="token operator">&lt;</span>TodoItem\n                key<span class="token operator">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">}</span>\n                index<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span>\n                todo<span class="token operator">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">}</span>\n                done<span class="token operator">=</span><span class="token punctuation">{</span>done<span class="token punctuation">}</span>\n                removeTodo<span class="token operator">=</span><span class="token punctuation">{</span>removeTodo<span class="token punctuation">}</span>\n                toggleTodo<span class="token operator">=</span><span class="token punctuation">{</span>toggleTodo<span class="token punctuation">}</span>\n              <span class="token operator">/</span><span class="token operator">></span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token comment">// src/todo/TodoItem.jsx</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">\'prop-types\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">TodoItem</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    index<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n    todo<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n    done<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>bool<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n    toggleTodo<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n    removeTodo<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> index<span class="token punctuation">,</span> todo<span class="token punctuation">,</span> done<span class="token punctuation">,</span> toggleTodo<span class="token punctuation">,</span> removeTodo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>li<span class="token operator">></span>\n        <span class="token operator">&lt;</span>input\n          id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`check-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>todo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span>\n          type<span class="token operator">=</span><span class="token string">"checkbox"</span>\n          defaultChecked<span class="token operator">=</span><span class="token punctuation">{</span>done<span class="token punctuation">}</span>\n          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> cursor<span class="token punctuation">:</span> <span class="token string">\'pointer\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token function">toggleTodo</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`check-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>todo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> margin<span class="token punctuation">:</span> <span class="token string">\'0 20px 0 10px\'</span><span class="token punctuation">,</span> cursor<span class="token punctuation">:</span> <span class="token string">\'pointer\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>\n          <span class="token punctuation">{</span>todo<span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>\n        <span class="token operator">&lt;</span>button\n          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> cursor<span class="token punctuation">:</span> <span class="token string">\'pointer\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token function">removeTodo</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token operator">></span>\n          X\n        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="hljs-js"><code class="hljs-js"><span class="token comment">// src/todo/TodoAdder.jsx</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">\'prop-types\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">TodoAdder</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    addTodo<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">handleSubmit</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$input<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>todo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">addTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>$input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>fieldset<span class="token operator">></span>\n          <span class="token operator">&lt;</span>input\n            ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>$input<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n              <span class="token keyword">this</span><span class="token punctuation">.</span>$input <span class="token operator">=</span> $input<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">}</span>\n            type<span class="token operator">=</span><span class="token string">"text"</span>\n          <span class="token operator">/</span><span class="token operator">></span>\n          <span class="token operator">&lt;</span>button<span class="token operator">></span>Add<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>fieldset<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>참조</h2>\n<ul>\n<li><a href="https://github.com/reactjs/redux">Redux github repository</a></li>\n</ul>',frontmatter:{title:"Redux 튜토리얼",path:"/redux-from-scratch/",images:["images/redux.jpg"],category:"JavaScript",tags:["javascript","reactjs","redux","flux"],date:"2017-10-05T20:39:24.000Z",components:[{rootId:"redux-tutorial",fileName:"redux-tutorial/index"}],tweets:null,summary:"Redux는 상태를 관리해주는 라이브러리로 React JS, Vue JS 등과 함께 사용되며, 큰 애플리케이션의 상태를 보다 쉽게 할 수 있도록 도와준다."}}},pageContext:{}}}}]);
//# sourceMappingURL=path---redux-from-scratch-314642a8ed5f21a2d96d.js.map